// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appconfig "github.com/transcom/mymove/pkg/appconfig"

	models "github.com/transcom/mymove/pkg/models"

	uuid "github.com/gofrs/uuid"
)

// MoveRouter is an autogenerated mock type for the MoveRouter type
type MoveRouter struct {
	mock.Mock
}

// Approve provides a mock function with given fields: appCfg, move
func (_m *MoveRouter) Approve(appCfg appconfig.AppConfig, move *models.Move) error {
	ret := _m.Called(appCfg, move)

	var r0 error
	if rf, ok := ret.Get(0).(func(appconfig.AppConfig, *models.Move) error); ok {
		r0 = rf(appCfg, move)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApproveAmendedOrders provides a mock function with given fields: appCfg, moveID, orderID
func (_m *MoveRouter) ApproveAmendedOrders(appCfg appconfig.AppConfig, moveID uuid.UUID, orderID uuid.UUID) (models.Move, error) {
	ret := _m.Called(appCfg, moveID, orderID)

	var r0 models.Move
	if rf, ok := ret.Get(0).(func(appconfig.AppConfig, uuid.UUID, uuid.UUID) models.Move); ok {
		r0 = rf(appCfg, moveID, orderID)
	} else {
		r0 = ret.Get(0).(models.Move)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(appconfig.AppConfig, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(appCfg, moveID, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cancel provides a mock function with given fields: appCfg, reason, move
func (_m *MoveRouter) Cancel(appCfg appconfig.AppConfig, reason string, move *models.Move) error {
	ret := _m.Called(appCfg, reason, move)

	var r0 error
	if rf, ok := ret.Get(0).(func(appconfig.AppConfig, string, *models.Move) error); ok {
		r0 = rf(appCfg, reason, move)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CompleteServiceCounseling provides a mock function with given fields: appCfg, move
func (_m *MoveRouter) CompleteServiceCounseling(appCfg appconfig.AppConfig, move *models.Move) error {
	ret := _m.Called(appCfg, move)

	var r0 error
	if rf, ok := ret.Get(0).(func(appconfig.AppConfig, *models.Move) error); ok {
		r0 = rf(appCfg, move)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendToOfficeUser provides a mock function with given fields: appCfg, move
func (_m *MoveRouter) SendToOfficeUser(appCfg appconfig.AppConfig, move *models.Move) error {
	ret := _m.Called(appCfg, move)

	var r0 error
	if rf, ok := ret.Get(0).(func(appconfig.AppConfig, *models.Move) error); ok {
		r0 = rf(appCfg, move)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Submit provides a mock function with given fields: appCfg, move
func (_m *MoveRouter) Submit(appCfg appconfig.AppConfig, move *models.Move) error {
	ret := _m.Called(appCfg, move)

	var r0 error
	if rf, ok := ret.Get(0).(func(appconfig.AppConfig, *models.Move) error); ok {
		r0 = rf(appCfg, move)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
