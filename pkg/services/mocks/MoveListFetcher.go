// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appconfig "github.com/transcom/mymove/pkg/appconfig"

	models "github.com/transcom/mymove/pkg/models"

	services "github.com/transcom/mymove/pkg/services"
)

// MoveListFetcher is an autogenerated mock type for the MoveListFetcher type
type MoveListFetcher struct {
	mock.Mock
}

// FetchMoveCount provides a mock function with given fields: appCfg, filters
func (_m *MoveListFetcher) FetchMoveCount(appCfg appconfig.AppConfig, filters []services.QueryFilter) (int, error) {
	ret := _m.Called(appCfg, filters)

	var r0 int
	if rf, ok := ret.Get(0).(func(appconfig.AppConfig, []services.QueryFilter) int); ok {
		r0 = rf(appCfg, filters)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(appconfig.AppConfig, []services.QueryFilter) error); ok {
		r1 = rf(appCfg, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchMoveList provides a mock function with given fields: appCfg, filters, associations, pagination, ordering
func (_m *MoveListFetcher) FetchMoveList(appCfg appconfig.AppConfig, filters []services.QueryFilter, associations services.QueryAssociations, pagination services.Pagination, ordering services.QueryOrder) (models.Moves, error) {
	ret := _m.Called(appCfg, filters, associations, pagination, ordering)

	var r0 models.Moves
	if rf, ok := ret.Get(0).(func(appconfig.AppConfig, []services.QueryFilter, services.QueryAssociations, services.Pagination, services.QueryOrder) models.Moves); ok {
		r0 = rf(appCfg, filters, associations, pagination, ordering)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Moves)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(appconfig.AppConfig, []services.QueryFilter, services.QueryAssociations, services.Pagination, services.QueryOrder) error); ok {
		r1 = rf(appCfg, filters, associations, pagination, ordering)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
