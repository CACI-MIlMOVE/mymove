// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	appconfig "github.com/transcom/mymove/pkg/appconfig"
	adminmessages "github.com/transcom/mymove/pkg/gen/adminmessages"

	mock "github.com/stretchr/testify/mock"

	models "github.com/transcom/mymove/pkg/models"

	uuid "github.com/gofrs/uuid"

	validate "github.com/gobuffalo/validate/v3"
)

// AdminUserUpdater is an autogenerated mock type for the AdminUserUpdater type
type AdminUserUpdater struct {
	mock.Mock
}

// UpdateAdminUser provides a mock function with given fields: appCfg, id, payload
func (_m *AdminUserUpdater) UpdateAdminUser(appCfg appconfig.AppConfig, id uuid.UUID, payload *adminmessages.AdminUserUpdatePayload) (*models.AdminUser, *validate.Errors, error) {
	ret := _m.Called(appCfg, id, payload)

	var r0 *models.AdminUser
	if rf, ok := ret.Get(0).(func(appconfig.AppConfig, uuid.UUID, *adminmessages.AdminUserUpdatePayload) *models.AdminUser); ok {
		r0 = rf(appCfg, id, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AdminUser)
		}
	}

	var r1 *validate.Errors
	if rf, ok := ret.Get(1).(func(appconfig.AppConfig, uuid.UUID, *adminmessages.AdminUserUpdatePayload) *validate.Errors); ok {
		r1 = rf(appCfg, id, payload)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*validate.Errors)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(appconfig.AppConfig, uuid.UUID, *adminmessages.AdminUserUpdatePayload) error); ok {
		r2 = rf(appCfg, id, payload)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
