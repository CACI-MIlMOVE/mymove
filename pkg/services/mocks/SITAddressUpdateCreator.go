// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"
)

// SITAddressUpdateCreator is an autogenerated mock type for the SITAddressUpdateCreator type
type SITAddressUpdateCreator struct {
	mock.Mock
}

// CreateSITAddressUpdate provides a mock function with given fields: appCtx, sitAddressUpdate
func (_m *SITAddressUpdateCreator) CreateSITAddressUpdate(appCtx appcontext.AppContext, sitAddressUpdate models.SITAddressUpdate) (*models.SITAddressUpdates, error) {
	ret := _m.Called(appCtx, sitAddressUpdate)

	var r0 *models.SITAddressUpdates
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.SITAddressUpdate) (*models.SITAddressUpdates, error)); ok {
		return rf(appCtx, sitAddressUpdate)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.SITAddressUpdate) *models.SITAddressUpdates); ok {
		r0 = rf(appCtx, sitAddressUpdate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SITAddressUpdates)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, models.SITAddressUpdate) error); ok {
		r1 = rf(appCtx, sitAddressUpdate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSITAddressUpdateCreator interface {
	mock.TestingT
	Cleanup(func())
}

// NewSITAddressUpdateCreator creates a new instance of SITAddressUpdateCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSITAddressUpdateCreator(t mockConstructorTestingTNewSITAddressUpdateCreator) *SITAddressUpdateCreator {
	mock := &SITAddressUpdateCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
