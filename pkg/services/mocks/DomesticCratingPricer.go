// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appconfig "github.com/transcom/mymove/pkg/appconfig"

	models "github.com/transcom/mymove/pkg/models"

	services "github.com/transcom/mymove/pkg/services"

	time "time"

	unit "github.com/transcom/mymove/pkg/unit"
)

// DomesticCratingPricer is an autogenerated mock type for the DomesticCratingPricer type
type DomesticCratingPricer struct {
	mock.Mock
}

// Price provides a mock function with given fields: appCfg, contractCode, requestedPickupDate, billedCubicFeet, servicesScheduleOrigin
func (_m *DomesticCratingPricer) Price(appCfg appconfig.AppConfig, contractCode string, requestedPickupDate time.Time, billedCubicFeet unit.CubicFeet, servicesScheduleOrigin int) (unit.Cents, services.PricingDisplayParams, error) {
	ret := _m.Called(appCfg, contractCode, requestedPickupDate, billedCubicFeet, servicesScheduleOrigin)

	var r0 unit.Cents
	if rf, ok := ret.Get(0).(func(appconfig.AppConfig, string, time.Time, unit.CubicFeet, int) unit.Cents); ok {
		r0 = rf(appCfg, contractCode, requestedPickupDate, billedCubicFeet, servicesScheduleOrigin)
	} else {
		r0 = ret.Get(0).(unit.Cents)
	}

	var r1 services.PricingDisplayParams
	if rf, ok := ret.Get(1).(func(appconfig.AppConfig, string, time.Time, unit.CubicFeet, int) services.PricingDisplayParams); ok {
		r1 = rf(appCfg, contractCode, requestedPickupDate, billedCubicFeet, servicesScheduleOrigin)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(services.PricingDisplayParams)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(appconfig.AppConfig, string, time.Time, unit.CubicFeet, int) error); ok {
		r2 = rf(appCfg, contractCode, requestedPickupDate, billedCubicFeet, servicesScheduleOrigin)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PriceUsingParams provides a mock function with given fields: appCfg, params
func (_m *DomesticCratingPricer) PriceUsingParams(appCfg appconfig.AppConfig, params models.PaymentServiceItemParams) (unit.Cents, services.PricingDisplayParams, error) {
	ret := _m.Called(appCfg, params)

	var r0 unit.Cents
	if rf, ok := ret.Get(0).(func(appconfig.AppConfig, models.PaymentServiceItemParams) unit.Cents); ok {
		r0 = rf(appCfg, params)
	} else {
		r0 = ret.Get(0).(unit.Cents)
	}

	var r1 services.PricingDisplayParams
	if rf, ok := ret.Get(1).(func(appconfig.AppConfig, models.PaymentServiceItemParams) services.PricingDisplayParams); ok {
		r1 = rf(appCfg, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(services.PricingDisplayParams)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(appconfig.AppConfig, models.PaymentServiceItemParams) error); ok {
		r2 = rf(appCfg, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
