// Code generated by go-swagger; DO NOT EDIT.

package supportmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MTOServiceItem MTOServiceItem describes a base type of a service item. Polymorphic type. Both Move Task Orders and MTO Shipments will have MTO Service Items.
// swagger:discriminator MTOServiceItem modelType
type MTOServiceItem interface {
	runtime.Validatable

	// description
	Description string `json:"description,omitempty"`

	// e tag
	ETag() string
	SetETag(string)

	// id
	// Format: uuid
	ID() strfmt.UUID
	SetID(strfmt.UUID)

	// model type
	// Required: true
	ModelType() MTOServiceItemModelType
	SetModelType(MTOServiceItemModelType)

	// move task order ID
	// Required: true
	// Format: uuid
	MoveTaskOrderID() *strfmt.UUID
	SetMoveTaskOrderID(*strfmt.UUID)

	// mto shipment ID
	// Format: uuid
	MtoShipmentID() strfmt.UUID
	SetMtoShipmentID(strfmt.UUID)

	// re service ID
	// Format: uuid
	ReServiceID() strfmt.UUID
	SetReServiceID(strfmt.UUID)

	// re service name
	ReServiceName() string
	SetReServiceName(string)

	// rejection reason
	RejectionReason() *string
	SetRejectionReason(*string)

	// status
	Status MTOServiceItemStatus `json:"status,omitempty"`

	// total
	Total int64 `json:"total,omitempty"`
}

type mTOServiceItem struct {
	eTagField string

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	reServiceIdField strfmt.UUID

	reServiceNameField string

	rejectionReasonField *string

	statusField MTOServiceItemStatus
}

// ETag gets the e tag of this polymorphic type
func (m *mTOServiceItem) ETag() string {
	return m.eTagField
}

// SetETag sets the e tag of this polymorphic type
func (m *mTOServiceItem) SetETag(val string) {
	m.eTagField = val
}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var mTOServiceItemTypeFeeTypePropEnum []interface{}

	var result []MTOServiceItem
	for _, element := range elements {
		obj, err := unmarshalMTOServiceItem(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalMTOServiceItem unmarshals polymorphic MTOServiceItem
func UnmarshalMTOServiceItem(reader io.Reader, consumer runtime.Consumer) (MTOServiceItem, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalMTOServiceItem(data, consumer)
}

func unmarshalMTOServiceItem(data []byte, consumer runtime.Consumer) (MTOServiceItem, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the modelType property.
	var getType struct {
		ModelType string `json:"modelType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("modelType", "body", getType.ModelType); err != nil {
		return nil, err
	}

	// The value of modelType is used to determine which type to create and unmarshal the data into
	switch getType.ModelType {
	case "MTOServiceItem":
		var result mTOServiceItem
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid modelType value: %q", getType.ModelType)

}

// Validate validates this m t o service item
func (m *mTOServiceItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoveTaskOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtoShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReServiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *mTOServiceItem) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID()) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *mTOServiceItem) validateMoveTaskOrderID(formats strfmt.Registry) error {

	if err := validate.Required("moveTaskOrderID", "body", m.MoveTaskOrderID()); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItem) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.MtoShipmentID()) { // not required
		return nil
	}

	if err := validate.FormatOf("mtoShipmentID", "body", "uuid", m.MtoShipmentID().String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MTOServiceItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MTOServiceItem) UnmarshalBinary(b []byte) error {
	var res MTOServiceItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
