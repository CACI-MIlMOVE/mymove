// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MovingExpense2 Expenses associated with moving
//
// swagger:model MovingExpense-2
type MovingExpense2 struct {

	// The amount for this expense
	//
	Amount *int64 `json:"amount,omitempty"`

	// description
	// Example: 4200
	Description int64 `json:"description,omitempty"`

	// document id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	DocumentID strfmt.UUID `json:"document_id,omitempty"`

	// id
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// I don't have this receipt
	MissingReceipt bool `json:"missing_receipt,omitempty"`

	// moving expense type
	MovingExpenseType MovingExpenseType `json:"movingExpenseType,omitempty"`

	// ppm shipment id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	PpmShipmentID strfmt.UUID `json:"ppm_shipment_id,omitempty"`

	// Storage end date
	//
	// The date and time that storage ends
	// Example: 2018-04-26
	// Format: date
	SitEndDate strfmt.Date `json:"sit_end_date,omitempty"`

	// Storage start date
	//
	// The date and time that storage starts
	// Example: 2018-04-26
	// Format: date
	SitStartDate strfmt.Date `json:"sit_start_date,omitempty"`

	// Did you pay with your GTCC (Government Travel Charge Card)?
	UsedGtcc bool `json:"used_gtcc,omitempty"`
}

// Validate validates this moving expense 2
func (m *MovingExpense2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDocumentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMovingExpenseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePpmShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MovingExpense2) validateDocumentID(formats strfmt.Registry) error {
	if swag.IsZero(m.DocumentID) { // not required
		return nil
	}

	if err := validate.FormatOf("document_id", "body", "uuid", m.DocumentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MovingExpense2) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MovingExpense2) validateMovingExpenseType(formats strfmt.Registry) error {
	if swag.IsZero(m.MovingExpenseType) { // not required
		return nil
	}

	if err := m.MovingExpenseType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("movingExpenseType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("movingExpenseType")
		}
		return err
	}

	return nil
}

func (m *MovingExpense2) validatePpmShipmentID(formats strfmt.Registry) error {
	if swag.IsZero(m.PpmShipmentID) { // not required
		return nil
	}

	if err := validate.FormatOf("ppm_shipment_id", "body", "uuid", m.PpmShipmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MovingExpense2) validateSitEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.SitEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sit_end_date", "body", "date", m.SitEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MovingExpense2) validateSitStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.SitStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sit_start_date", "body", "date", m.SitStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this moving expense 2 based on the context it is used
func (m *MovingExpense2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMovingExpenseType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MovingExpense2) contextValidateMovingExpenseType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MovingExpenseType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("movingExpenseType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("movingExpenseType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MovingExpense2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MovingExpense2) UnmarshalBinary(b []byte) error {
	var res MovingExpense2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
