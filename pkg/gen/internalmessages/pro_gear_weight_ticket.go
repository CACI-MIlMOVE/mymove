// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProGearWeightTicket Pro-gear associated information and weight docs for a PPM shipment
//
// swagger:model ProGearWeightTicket
type ProGearWeightTicket struct {

	// Indicates if this information is for the customer's own pro-gear, otherwise, it's the spouse's.
	BelongsToSelf *bool `json:"belongsToSelf"`

	// Constructed weight of the pro-gear.
	// Minimum: 0
	ConstructedWeight *int64 `json:"constructedWeight"`

	// constructed weight document
	// Required: true
	ConstructedWeightDocument *DocumentPayload `json:"constructedWeightDocument"`

	// constructed weight document Id
	// Required: true
	// Format: uuid
	ConstructedWeightDocumentID UUID `json:"constructedWeightDocumentId"`

	// created at
	// Required: true
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt"`

	// Describes the pro-gear that was moved.
	Description *string `json:"description"`

	// e tag
	// Required: true
	ETag ETag `json:"eTag"`

	// empty document
	// Required: true
	EmptyDocument *DocumentPayload `json:"emptyDocument"`

	// empty document Id
	// Required: true
	// Format: uuid
	EmptyDocumentID UUID `json:"emptyDocumentId"`

	// Weight of the vehicle not including the pro-gear.
	// Minimum: 0
	EmptyWeight *int64 `json:"emptyWeight"`

	// full document
	// Required: true
	FullDocument *DocumentPayload `json:"fullDocument"`

	// full document Id
	// Required: true
	// Format: uuid
	FullDocumentID UUID `json:"fullDocumentId"`

	// Weight of the vehicle including the pro-gear.
	// Minimum: 0
	FullWeight *int64 `json:"fullWeight"`

	// Indicates if the user has a weight ticket for their pro-gear, otherwise they have a constructed weight.
	HasWeightTickets *bool `json:"hasWeightTickets"`

	// id
	// Required: true
	// Format: uuid
	ID UUID `json:"id"`

	// ppm shipment Id
	// Required: true
	// Format: uuid
	PpmShipmentID UUID `json:"ppmShipmentId"`

	// reason
	Reason *PPMDocumentStatusReason `json:"reason"`

	// status
	Status *PPMDocumentStatus `json:"status"`

	// updated at
	// Required: true
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt"`
}

// Validate validates this pro gear weight ticket
func (m *ProGearWeightTicket) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConstructedWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConstructedWeightDocument(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConstructedWeightDocumentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateETag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmptyDocument(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmptyDocumentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmptyWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullDocument(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullDocumentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePpmShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProGearWeightTicket) validateConstructedWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.ConstructedWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("constructedWeight", "body", *m.ConstructedWeight, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ProGearWeightTicket) validateConstructedWeightDocument(formats strfmt.Registry) error {

	if err := validate.Required("constructedWeightDocument", "body", m.ConstructedWeightDocument); err != nil {
		return err
	}

	if m.ConstructedWeightDocument != nil {
		if err := m.ConstructedWeightDocument.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("constructedWeightDocument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("constructedWeightDocument")
			}
			return err
		}
	}

	return nil
}

func (m *ProGearWeightTicket) validateConstructedWeightDocumentID(formats strfmt.Registry) error {

	if err := validate.Required("constructedWeightDocumentId", "body", UUID(m.ConstructedWeightDocumentID)); err != nil {
		return err
	}

	if err := m.ConstructedWeightDocumentID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("constructedWeightDocumentId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("constructedWeightDocumentId")
		}
		return err
	}

	return nil
}

func (m *ProGearWeightTicket) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProGearWeightTicket) validateETag(formats strfmt.Registry) error {

	if err := validate.Required("eTag", "body", ETag(m.ETag)); err != nil {
		return err
	}

	if err := m.ETag.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("eTag")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("eTag")
		}
		return err
	}

	return nil
}

func (m *ProGearWeightTicket) validateEmptyDocument(formats strfmt.Registry) error {

	if err := validate.Required("emptyDocument", "body", m.EmptyDocument); err != nil {
		return err
	}

	if m.EmptyDocument != nil {
		if err := m.EmptyDocument.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emptyDocument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emptyDocument")
			}
			return err
		}
	}

	return nil
}

func (m *ProGearWeightTicket) validateEmptyDocumentID(formats strfmt.Registry) error {

	if err := validate.Required("emptyDocumentId", "body", UUID(m.EmptyDocumentID)); err != nil {
		return err
	}

	if err := m.EmptyDocumentID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("emptyDocumentId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("emptyDocumentId")
		}
		return err
	}

	return nil
}

func (m *ProGearWeightTicket) validateEmptyWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.EmptyWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("emptyWeight", "body", *m.EmptyWeight, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ProGearWeightTicket) validateFullDocument(formats strfmt.Registry) error {

	if err := validate.Required("fullDocument", "body", m.FullDocument); err != nil {
		return err
	}

	if m.FullDocument != nil {
		if err := m.FullDocument.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fullDocument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fullDocument")
			}
			return err
		}
	}

	return nil
}

func (m *ProGearWeightTicket) validateFullDocumentID(formats strfmt.Registry) error {

	if err := validate.Required("fullDocumentId", "body", UUID(m.FullDocumentID)); err != nil {
		return err
	}

	if err := m.FullDocumentID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fullDocumentId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fullDocumentId")
		}
		return err
	}

	return nil
}

func (m *ProGearWeightTicket) validateFullWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.FullWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("fullWeight", "body", *m.FullWeight, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ProGearWeightTicket) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", UUID(m.ID)); err != nil {
		return err
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *ProGearWeightTicket) validatePpmShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("ppmShipmentId", "body", UUID(m.PpmShipmentID)); err != nil {
		return err
	}

	if err := m.PpmShipmentID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ppmShipmentId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ppmShipmentId")
		}
		return err
	}

	return nil
}

func (m *ProGearWeightTicket) validateReason(formats strfmt.Registry) error {
	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	if m.Reason != nil {
		if err := m.Reason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reason")
			}
			return err
		}
	}

	return nil
}

func (m *ProGearWeightTicket) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *ProGearWeightTicket) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this pro gear weight ticket based on the context it is used
func (m *ProGearWeightTicket) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConstructedWeightDocument(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConstructedWeightDocumentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateETag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmptyDocument(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmptyDocumentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFullDocument(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFullDocumentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePpmShipmentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProGearWeightTicket) contextValidateConstructedWeightDocument(ctx context.Context, formats strfmt.Registry) error {

	if m.ConstructedWeightDocument != nil {
		if err := m.ConstructedWeightDocument.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("constructedWeightDocument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("constructedWeightDocument")
			}
			return err
		}
	}

	return nil
}

func (m *ProGearWeightTicket) contextValidateConstructedWeightDocumentID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ConstructedWeightDocumentID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("constructedWeightDocumentId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("constructedWeightDocumentId")
		}
		return err
	}

	return nil
}

func (m *ProGearWeightTicket) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *ProGearWeightTicket) contextValidateETag(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ETag.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("eTag")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("eTag")
		}
		return err
	}

	return nil
}

func (m *ProGearWeightTicket) contextValidateEmptyDocument(ctx context.Context, formats strfmt.Registry) error {

	if m.EmptyDocument != nil {
		if err := m.EmptyDocument.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emptyDocument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emptyDocument")
			}
			return err
		}
	}

	return nil
}

func (m *ProGearWeightTicket) contextValidateEmptyDocumentID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.EmptyDocumentID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("emptyDocumentId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("emptyDocumentId")
		}
		return err
	}

	return nil
}

func (m *ProGearWeightTicket) contextValidateFullDocument(ctx context.Context, formats strfmt.Registry) error {

	if m.FullDocument != nil {
		if err := m.FullDocument.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fullDocument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fullDocument")
			}
			return err
		}
	}

	return nil
}

func (m *ProGearWeightTicket) contextValidateFullDocumentID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FullDocumentID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fullDocumentId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fullDocumentId")
		}
		return err
	}

	return nil
}

func (m *ProGearWeightTicket) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *ProGearWeightTicket) contextValidatePpmShipmentID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PpmShipmentID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ppmShipmentId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ppmShipmentId")
		}
		return err
	}

	return nil
}

func (m *ProGearWeightTicket) contextValidateReason(ctx context.Context, formats strfmt.Registry) error {

	if m.Reason != nil {
		if err := m.Reason.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reason")
			}
			return err
		}
	}

	return nil
}

func (m *ProGearWeightTicket) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *ProGearWeightTicket) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updatedAt", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProGearWeightTicket) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProGearWeightTicket) UnmarshalBinary(b []byte) error {
	var res ProGearWeightTicket
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
