// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateWeightTicket update weight ticket
//
// swagger:model UpdateWeightTicket
type UpdateWeightTicket struct {

	// Empty Recorded Weight
	// Minimum: 0
	EmptyWeight *int64 `json:"empty_weight,omitempty"`

	// full weight ticket recorded weight
	// Minimum: 0
	FullWeight *int64 `json:"full_weight,omitempty"`

	// has empty weight ticket
	// Enum: [Yes No]
	MissingEmptyWeightTicket bool `json:"missing_empty_weight_ticket,omitempty"`

	// has full weight ticket
	MissingFullWeightTicket bool `json:"missing_full_weight_ticket,omitempty"`

	// Owns trailer
	OwnsTrailer *bool `json:"owns_trailer,omitempty"`

	// Trailer meets criteria
	TrailerMeetsCriteria *bool `json:"trailer_meets_criteria,omitempty"`

	// Vehicle description (ex. 'SUV')
	VehicleDescription *string `json:"vehicle_description,omitempty"`
}

// Validate validates this update weight ticket
func (m *UpdateWeightTicket) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmptyWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMissingEmptyWeightTicket(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateWeightTicket) validateEmptyWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.EmptyWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("empty_weight", "body", *m.EmptyWeight, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *UpdateWeightTicket) validateFullWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.FullWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("full_weight", "body", *m.FullWeight, 0, false); err != nil {
		return err
	}

	return nil
}

var updateWeightTicketTypeMissingEmptyWeightTicketPropEnum []interface{}

func init() {
	var res []bool
	if err := json.Unmarshal([]byte(`["Yes","No"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateWeightTicketTypeMissingEmptyWeightTicketPropEnum = append(updateWeightTicketTypeMissingEmptyWeightTicketPropEnum, v)
	}
}

// prop value enum
func (m *UpdateWeightTicket) validateMissingEmptyWeightTicketEnum(path, location string, value bool) error {
	if err := validate.EnumCase(path, location, value, updateWeightTicketTypeMissingEmptyWeightTicketPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateWeightTicket) validateMissingEmptyWeightTicket(formats strfmt.Registry) error {
	if swag.IsZero(m.MissingEmptyWeightTicket) { // not required
		return nil
	}

	// value enum
	if err := m.validateMissingEmptyWeightTicketEnum("missing_empty_weight_ticket", "body", m.MissingEmptyWeightTicket); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update weight ticket based on context it is used
func (m *UpdateWeightTicket) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateWeightTicket) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateWeightTicket) UnmarshalBinary(b []byte) error {
	var res UpdateWeightTicket
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
