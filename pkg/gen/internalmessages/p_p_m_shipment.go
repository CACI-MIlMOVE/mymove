// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PPMShipment A personally procured move is a type of shipment that a service members moves themselves.
//
// swagger:model PPMShipment
type PPMShipment struct {

	// actual move date
	// Format: date
	ActualMoveDate strfmt.Date `json:"actualMoveDate,omitempty"`

	// advance Id
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	AdvanceID strfmt.UUID `json:"advanceId,omitempty"`

	// advance requested
	AdvanceRequested bool `json:"advanceRequested,omitempty"`

	// advance worksheet Id
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	AdvanceWorksheetID strfmt.UUID `json:"advanceWorksheetId,omitempty"`

	// created at
	// Required: true
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt"`

	// ZIP
	// Example: '90210' or 'N15 3NL'
	// Required: true
	DestinationPostalCode *string `json:"destinationPostalCode"`

	// A hash unique to this shipment that should be used as the "If-Match" header for any updates.
	// Read Only: true
	ETag string `json:"eTag,omitempty"`

	// estimated incentive
	EstimatedIncentive int64 `json:"estimatedIncentive,omitempty"`

	// estimated weight
	// Example: 4200
	EstimatedWeight int64 `json:"estimatedWeight,omitempty"`

	// Date the customer expects to move.
	//
	// Required: true
	// Format: date
	ExpectedDepartureDate *strfmt.Date `json:"expectedDepartureDate"`

	// Indicates whether PPM shipment has pro gear.
	//
	HasProGear bool `json:"hasProGear,omitempty"`

	// id
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// The net weight of the shipment once it has been weight
	//
	// Example: 4300
	NetWeight int64 `json:"netWeight,omitempty"`

	// ZIP
	//
	// zip code, international allowed
	// Example: '90210' or 'N15 3NL'
	// Required: true
	PickupPostalCode *string `json:"pickupPostalCode"`

	// pro gear weight
	ProGearWeight int64 `json:"proGearWeight,omitempty"`

	// reviewed at
	// Format: date-time
	ReviewedAt strfmt.DateTime `json:"reviewedAt,omitempty"`

	// ZIP
	// Example: '90210' or 'N15 3NL'
	SecondaryDestinationPostalCode string `json:"secondaryDestinationPostalCode,omitempty"`

	// ZIP
	// Example: '90210' or 'N15 3NL'
	SecondaryPickupPostalCode string `json:"secondaryPickupPostalCode,omitempty"`

	// shipment Id
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Required: true
	// Format: uuid
	ShipmentID *strfmt.UUID `json:"shipmentId"`

	// sit expected
	// Required: true
	SitExpected *bool `json:"sitExpected"`

	// spouse pro gear weight
	SpouseProGearWeight int64 `json:"spouseProGearWeight,omitempty"`

	// status
	// Example: DRAFT
	// Required: true
	// Read Only: true
	// Enum: [DRAFT SUBMITTED WAITING_ON_CUSTOMER NEEDS_ADVANCE_APPROVAL NEEDS_PAYMENT_APPROVAL PAYMENT_APPROVED]
	Status string `json:"status"`

	// submitted at
	// Format: date-time
	SubmittedAt strfmt.DateTime `json:"submittedAt,omitempty"`

	// updated at
	// Required: true
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt"`
}

// Validate validates this p p m shipment
func (m *PPMShipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActualMoveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdvanceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdvanceWorksheetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedDepartureDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReviewedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitExpected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmittedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PPMShipment) validateActualMoveDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ActualMoveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("actualMoveDate", "body", "date", m.ActualMoveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateAdvanceID(formats strfmt.Registry) error {
	if swag.IsZero(m.AdvanceID) { // not required
		return nil
	}

	if err := validate.FormatOf("advanceId", "body", "uuid", m.AdvanceID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateAdvanceWorksheetID(formats strfmt.Registry) error {
	if swag.IsZero(m.AdvanceWorksheetID) { // not required
		return nil
	}

	if err := validate.FormatOf("advanceWorksheetId", "body", "uuid", m.AdvanceWorksheetID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateDestinationPostalCode(formats strfmt.Registry) error {

	if err := validate.Required("destinationPostalCode", "body", m.DestinationPostalCode); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateExpectedDepartureDate(formats strfmt.Registry) error {

	if err := validate.Required("expectedDepartureDate", "body", m.ExpectedDepartureDate); err != nil {
		return err
	}

	if err := validate.FormatOf("expectedDepartureDate", "body", "date", m.ExpectedDepartureDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validatePickupPostalCode(formats strfmt.Registry) error {

	if err := validate.Required("pickupPostalCode", "body", m.PickupPostalCode); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateReviewedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ReviewedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("reviewedAt", "body", "date-time", m.ReviewedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("shipmentId", "body", m.ShipmentID); err != nil {
		return err
	}

	if err := validate.FormatOf("shipmentId", "body", "uuid", m.ShipmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateSitExpected(formats strfmt.Registry) error {

	if err := validate.Required("sitExpected", "body", m.SitExpected); err != nil {
		return err
	}

	return nil
}

var pPMShipmentTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DRAFT","SUBMITTED","WAITING_ON_CUSTOMER","NEEDS_ADVANCE_APPROVAL","NEEDS_PAYMENT_APPROVAL","PAYMENT_APPROVED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pPMShipmentTypeStatusPropEnum = append(pPMShipmentTypeStatusPropEnum, v)
	}
}

const (

	// PPMShipmentStatusDRAFT captures enum value "DRAFT"
	PPMShipmentStatusDRAFT string = "DRAFT"

	// PPMShipmentStatusSUBMITTED captures enum value "SUBMITTED"
	PPMShipmentStatusSUBMITTED string = "SUBMITTED"

	// PPMShipmentStatusWAITINGONCUSTOMER captures enum value "WAITING_ON_CUSTOMER"
	PPMShipmentStatusWAITINGONCUSTOMER string = "WAITING_ON_CUSTOMER"

	// PPMShipmentStatusNEEDSADVANCEAPPROVAL captures enum value "NEEDS_ADVANCE_APPROVAL"
	PPMShipmentStatusNEEDSADVANCEAPPROVAL string = "NEEDS_ADVANCE_APPROVAL"

	// PPMShipmentStatusNEEDSPAYMENTAPPROVAL captures enum value "NEEDS_PAYMENT_APPROVAL"
	PPMShipmentStatusNEEDSPAYMENTAPPROVAL string = "NEEDS_PAYMENT_APPROVAL"

	// PPMShipmentStatusPAYMENTAPPROVED captures enum value "PAYMENT_APPROVED"
	PPMShipmentStatusPAYMENTAPPROVED string = "PAYMENT_APPROVED"
)

// prop value enum
func (m *PPMShipment) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, pPMShipmentTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PPMShipment) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateSubmittedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.SubmittedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("submittedAt", "body", "date-time", m.SubmittedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p p m shipment based on the context it is used
func (m *PPMShipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateETag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PPMShipment) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) contextValidateETag(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "eTag", "body", string(m.ETag)); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updatedAt", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PPMShipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PPMShipment) UnmarshalBinary(b []byte) error {
	var res PPMShipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
