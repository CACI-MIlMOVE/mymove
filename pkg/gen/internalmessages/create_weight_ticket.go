// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateWeightTicket create weight ticket
//
// swagger:model CreateWeightTicket
type CreateWeightTicket struct {

	// created at
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// deleted at
	// Format: date-time
	DeletedAt strfmt.DateTime `json:"deleted_at,omitempty"`

	// Empty Document ID
	// Required: true
	// Format: uuid
	EmptyDocumentID *strfmt.UUID `json:"empty_document_id"`

	// Empty Document
	// Required: true
	EmptyDocumnt *DocumentPayload `json:"empty_documnt"`

	// Empty Recorded Weight
	// Minimum: 0
	EmptyWeight *int64 `json:"empty_weight,omitempty"`

	// Full Document
	// Required: true
	FullDocument *DocumentPayload `json:"full_document"`

	// Full Document ID
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Format: uuid
	FullDocumentID *strfmt.UUID `json:"full_document_id"`

	// full weight ticket recorded weight
	// Minimum: 0
	FullWeight *int64 `json:"full_weight,omitempty"`

	// id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// has empty weight ticket
	// Enum: [Yes No]
	MissingEmptyWeightTicket bool `json:"missing_empty_weight_ticket,omitempty"`

	// has full weight ticket
	MissingFullWeightTicket bool `json:"missing_full_weight_ticket,omitempty"`

	// Owns trailer
	OwnsTrailer *bool `json:"owns_trailer,omitempty"`

	// ppm shipment
	// Required: true
	PpmShipment *PPMShipment `json:"ppm_shipment"`

	// ppm shipment id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Format: uuid
	PpmShipmentID *strfmt.UUID `json:"ppm_shipment_id"`

	// Proof of Trailer Ownership Document
	// Required: true
	ProofOfTrailerOwnershipDocument *DocumentPayload `json:"proof_of_trailer_ownership_document"`

	// Trailer Document ID
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Format: uuid
	ProofOfTrailerOwnershipDocumentID *strfmt.UUID `json:"proof_of_trailer_ownership_document_id"`

	// Trailer meets criteria
	TrailerMeetsCriteria *bool `json:"trailer_meets_criteria,omitempty"`

	// updated at
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`

	// Vehicle description (ex. 'SUV')
	VehicleDescription *string `json:"vehicle_description,omitempty"`
}

// Validate validates this create weight ticket
func (m *CreateWeightTicket) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmptyDocumentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmptyDocumnt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmptyWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullDocument(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullDocumentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMissingEmptyWeightTicket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePpmShipment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePpmShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProofOfTrailerOwnershipDocument(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProofOfTrailerOwnershipDocumentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateWeightTicket) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateWeightTicket) validateDeletedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.DeletedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("deleted_at", "body", "date-time", m.DeletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateWeightTicket) validateEmptyDocumentID(formats strfmt.Registry) error {

	if err := validate.Required("empty_document_id", "body", m.EmptyDocumentID); err != nil {
		return err
	}

	if err := validate.FormatOf("empty_document_id", "body", "uuid", m.EmptyDocumentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateWeightTicket) validateEmptyDocumnt(formats strfmt.Registry) error {

	if err := validate.Required("empty_documnt", "body", m.EmptyDocumnt); err != nil {
		return err
	}

	if m.EmptyDocumnt != nil {
		if err := m.EmptyDocumnt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("empty_documnt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("empty_documnt")
			}
			return err
		}
	}

	return nil
}

func (m *CreateWeightTicket) validateEmptyWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.EmptyWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("empty_weight", "body", *m.EmptyWeight, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateWeightTicket) validateFullDocument(formats strfmt.Registry) error {

	if err := validate.Required("full_document", "body", m.FullDocument); err != nil {
		return err
	}

	if m.FullDocument != nil {
		if err := m.FullDocument.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_document")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("full_document")
			}
			return err
		}
	}

	return nil
}

func (m *CreateWeightTicket) validateFullDocumentID(formats strfmt.Registry) error {

	if err := validate.Required("full_document_id", "body", m.FullDocumentID); err != nil {
		return err
	}

	if err := validate.FormatOf("full_document_id", "body", "uuid", m.FullDocumentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateWeightTicket) validateFullWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.FullWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("full_weight", "body", *m.FullWeight, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateWeightTicket) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

var createWeightTicketTypeMissingEmptyWeightTicketPropEnum []interface{}

func init() {
	var res []bool
	if err := json.Unmarshal([]byte(`["Yes","No"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createWeightTicketTypeMissingEmptyWeightTicketPropEnum = append(createWeightTicketTypeMissingEmptyWeightTicketPropEnum, v)
	}
}

// prop value enum
func (m *CreateWeightTicket) validateMissingEmptyWeightTicketEnum(path, location string, value bool) error {
	if err := validate.EnumCase(path, location, value, createWeightTicketTypeMissingEmptyWeightTicketPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateWeightTicket) validateMissingEmptyWeightTicket(formats strfmt.Registry) error {
	if swag.IsZero(m.MissingEmptyWeightTicket) { // not required
		return nil
	}

	// value enum
	if err := m.validateMissingEmptyWeightTicketEnum("missing_empty_weight_ticket", "body", m.MissingEmptyWeightTicket); err != nil {
		return err
	}

	return nil
}

func (m *CreateWeightTicket) validatePpmShipment(formats strfmt.Registry) error {

	if err := validate.Required("ppm_shipment", "body", m.PpmShipment); err != nil {
		return err
	}

	if m.PpmShipment != nil {
		if err := m.PpmShipment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ppm_shipment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ppm_shipment")
			}
			return err
		}
	}

	return nil
}

func (m *CreateWeightTicket) validatePpmShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("ppm_shipment_id", "body", m.PpmShipmentID); err != nil {
		return err
	}

	if err := validate.FormatOf("ppm_shipment_id", "body", "uuid", m.PpmShipmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateWeightTicket) validateProofOfTrailerOwnershipDocument(formats strfmt.Registry) error {

	if err := validate.Required("proof_of_trailer_ownership_document", "body", m.ProofOfTrailerOwnershipDocument); err != nil {
		return err
	}

	if m.ProofOfTrailerOwnershipDocument != nil {
		if err := m.ProofOfTrailerOwnershipDocument.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proof_of_trailer_ownership_document")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proof_of_trailer_ownership_document")
			}
			return err
		}
	}

	return nil
}

func (m *CreateWeightTicket) validateProofOfTrailerOwnershipDocumentID(formats strfmt.Registry) error {

	if err := validate.Required("proof_of_trailer_ownership_document_id", "body", m.ProofOfTrailerOwnershipDocumentID); err != nil {
		return err
	}

	if err := validate.FormatOf("proof_of_trailer_ownership_document_id", "body", "uuid", m.ProofOfTrailerOwnershipDocumentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateWeightTicket) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create weight ticket based on the context it is used
func (m *CreateWeightTicket) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmptyDocumnt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFullDocument(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePpmShipment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProofOfTrailerOwnershipDocument(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateWeightTicket) contextValidateEmptyDocumnt(ctx context.Context, formats strfmt.Registry) error {

	if m.EmptyDocumnt != nil {
		if err := m.EmptyDocumnt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("empty_documnt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("empty_documnt")
			}
			return err
		}
	}

	return nil
}

func (m *CreateWeightTicket) contextValidateFullDocument(ctx context.Context, formats strfmt.Registry) error {

	if m.FullDocument != nil {
		if err := m.FullDocument.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_document")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("full_document")
			}
			return err
		}
	}

	return nil
}

func (m *CreateWeightTicket) contextValidatePpmShipment(ctx context.Context, formats strfmt.Registry) error {

	if m.PpmShipment != nil {
		if err := m.PpmShipment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ppm_shipment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ppm_shipment")
			}
			return err
		}
	}

	return nil
}

func (m *CreateWeightTicket) contextValidateProofOfTrailerOwnershipDocument(ctx context.Context, formats strfmt.Registry) error {

	if m.ProofOfTrailerOwnershipDocument != nil {
		if err := m.ProofOfTrailerOwnershipDocument.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proof_of_trailer_ownership_document")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proof_of_trailer_ownership_document")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateWeightTicket) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateWeightTicket) UnmarshalBinary(b []byte) error {
	var res CreateWeightTicket
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
