// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OktaUserPayload okta user payload
//
// swagger:model OktaUserPayload
type OktaUserPayload struct {

	// cac edipi
	// Example: 1234567890
	// Max Length: 10
	// Min Length: 7
	// Pattern: ^\d{10}$
	CacEdipi *string `json:"cac_edipi,omitempty"`

	// email
	// Example: user@email.com
	// Pattern: ^[a-zA-Z0-9.%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
	Email string `json:"email,omitempty"`

	// first name
	// Example: John
	FirstName string `json:"firstName,omitempty"`

	// last name
	// Example: Doe
	LastName string `json:"lastName,omitempty"`

	// login
	// Example: user@email.com
	// Pattern: ^[a-zA-Z0-9.%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
	Login string `json:"login,omitempty"`

	// sub
	// Example: 1duekdue9ekrjghf
	Sub string `json:"sub,omitempty"`
}

// Validate validates this okta user payload
func (m *OktaUserPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCacEdipi(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OktaUserPayload) validateCacEdipi(formats strfmt.Registry) error {
	if swag.IsZero(m.CacEdipi) { // not required
		return nil
	}

	if err := validate.MinLength("cac_edipi", "body", *m.CacEdipi, 7); err != nil {
		return err
	}

	if err := validate.MaxLength("cac_edipi", "body", *m.CacEdipi, 10); err != nil {
		return err
	}

	if err := validate.Pattern("cac_edipi", "body", *m.CacEdipi, `^\d{10}$`); err != nil {
		return err
	}

	return nil
}

func (m *OktaUserPayload) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.Pattern("email", "body", m.Email, `^[a-zA-Z0-9.%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`); err != nil {
		return err
	}

	return nil
}

func (m *OktaUserPayload) validateLogin(formats strfmt.Registry) error {
	if swag.IsZero(m.Login) { // not required
		return nil
	}

	if err := validate.Pattern("login", "body", m.Login, `^[a-zA-Z0-9.%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this okta user payload based on context it is used
func (m *OktaUserPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OktaUserPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OktaUserPayload) UnmarshalBinary(b []byte) error {
	var res OktaUserPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
