// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// HideMoveTaskOrderHandlerFunc turns a function with the right signature into a hide move task order handler
type HideMoveTaskOrderHandlerFunc func(HideMoveTaskOrderParams) middleware.Responder

// Handle executing the request and returning a response
func (fn HideMoveTaskOrderHandlerFunc) Handle(params HideMoveTaskOrderParams) middleware.Responder {
	return fn(params)
}

// HideMoveTaskOrderHandler interface for that can handle valid hide move task order params
type HideMoveTaskOrderHandler interface {
	Handle(HideMoveTaskOrderParams) middleware.Responder
}

// NewHideMoveTaskOrder creates a new http.Handler for the hide move task order operation
func NewHideMoveTaskOrder(ctx *middleware.Context, handler HideMoveTaskOrderHandler) *HideMoveTaskOrder {
	return &HideMoveTaskOrder{Context: ctx, Handler: handler}
}

/*HideMoveTaskOrder swagger:route PATCH /move-task-orders/{moveTaskOrderID}/hide moveTaskOrder hideMoveTaskOrder

hideMoveTaskOrder

Updates move task order without fake user data `show` to false. No request body required. <br />
<br />
This is a support endpoint and will not be available in production.


*/
type HideMoveTaskOrder struct {
	Context *middleware.Context
	Handler HideMoveTaskOrderHandler
}

func (o *HideMoveTaskOrder) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewHideMoveTaskOrderParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
