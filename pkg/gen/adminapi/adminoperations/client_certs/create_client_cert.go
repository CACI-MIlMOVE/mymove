// Code generated by go-swagger; DO NOT EDIT.

package client_certs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateClientCertHandlerFunc turns a function with the right signature into a create client cert handler
type CreateClientCertHandlerFunc func(CreateClientCertParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateClientCertHandlerFunc) Handle(params CreateClientCertParams) middleware.Responder {
	return fn(params)
}

// CreateClientCertHandler interface for that can handle valid create client cert params
type CreateClientCertHandler interface {
	Handle(CreateClientCertParams) middleware.Responder
}

// NewCreateClientCert creates a new http.Handler for the create client cert operation
func NewCreateClientCert(ctx *middleware.Context, handler CreateClientCertHandler) *CreateClientCert {
	return &CreateClientCert{Context: ctx, Handler: handler}
}

/*
	CreateClientCert swagger:route POST /client_certs client_certs createClientCert

create a client cert

creates and returns a client cert record
*/
type CreateClientCert struct {
	Context *middleware.Context
	Handler CreateClientCertHandler
}

func (o *CreateClientCert) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateClientCertParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
