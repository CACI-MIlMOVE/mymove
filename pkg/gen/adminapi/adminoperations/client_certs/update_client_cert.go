// Code generated by go-swagger; DO NOT EDIT.

package client_certs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateClientCertHandlerFunc turns a function with the right signature into a update client cert handler
type UpdateClientCertHandlerFunc func(UpdateClientCertParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateClientCertHandlerFunc) Handle(params UpdateClientCertParams) middleware.Responder {
	return fn(params)
}

// UpdateClientCertHandler interface for that can handle valid update client cert params
type UpdateClientCertHandler interface {
	Handle(UpdateClientCertParams) middleware.Responder
}

// NewUpdateClientCert creates a new http.Handler for the update client cert operation
func NewUpdateClientCert(ctx *middleware.Context, handler UpdateClientCertHandler) *UpdateClientCert {
	return &UpdateClientCert{Context: ctx, Handler: handler}
}

/*
	UpdateClientCert swagger:route PATCH /client_certs/{clientCertId} client_certs updateClientCert

Updates a client certificate
*/
type UpdateClientCert struct {
	Context *middleware.Context
	Handler UpdateClientCertHandler
}

func (o *UpdateClientCert) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateClientCertParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
