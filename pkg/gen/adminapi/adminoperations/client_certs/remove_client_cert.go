// Code generated by go-swagger; DO NOT EDIT.

package client_certs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RemoveClientCertHandlerFunc turns a function with the right signature into a remove client cert handler
type RemoveClientCertHandlerFunc func(RemoveClientCertParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RemoveClientCertHandlerFunc) Handle(params RemoveClientCertParams) middleware.Responder {
	return fn(params)
}

// RemoveClientCertHandler interface for that can handle valid remove client cert params
type RemoveClientCertHandler interface {
	Handle(RemoveClientCertParams) middleware.Responder
}

// NewRemoveClientCert creates a new http.Handler for the remove client cert operation
func NewRemoveClientCert(ctx *middleware.Context, handler RemoveClientCertHandler) *RemoveClientCert {
	return &RemoveClientCert{Context: ctx, Handler: handler}
}

/*
	RemoveClientCert swagger:route DELETE /client_certs/{clientCertId} client_certs removeClientCert

removes a client certificate
*/
type RemoveClientCert struct {
	Context *middleware.Context
	Handler RemoveClientCertHandler
}

func (o *RemoveClientCert) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRemoveClientCertParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
