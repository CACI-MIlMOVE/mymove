// Code generated by go-swagger; DO NOT EDIT.

package client_certs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// IndexClientCertsHandlerFunc turns a function with the right signature into a index client certs handler
type IndexClientCertsHandlerFunc func(IndexClientCertsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IndexClientCertsHandlerFunc) Handle(params IndexClientCertsParams) middleware.Responder {
	return fn(params)
}

// IndexClientCertsHandler interface for that can handle valid index client certs params
type IndexClientCertsHandler interface {
	Handle(IndexClientCertsParams) middleware.Responder
}

// NewIndexClientCerts creates a new http.Handler for the index client certs operation
func NewIndexClientCerts(ctx *middleware.Context, handler IndexClientCertsHandler) *IndexClientCerts {
	return &IndexClientCerts{Context: ctx, Handler: handler}
}

/*
	IndexClientCerts swagger:route GET /client_certs client_certs indexClientCerts

# List client certs

Returns a list of client certs
*/
type IndexClientCerts struct {
	Context *middleware.Context
	Handler IndexClientCertsHandler
}

func (o *IndexClientCerts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewIndexClientCertsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
