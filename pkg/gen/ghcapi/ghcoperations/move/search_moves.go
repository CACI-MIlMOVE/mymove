// Code generated by go-swagger; DO NOT EDIT.

package move

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SearchMovesHandlerFunc turns a function with the right signature into a search moves handler
type SearchMovesHandlerFunc func(SearchMovesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SearchMovesHandlerFunc) Handle(params SearchMovesParams) middleware.Responder {
	return fn(params)
}

// SearchMovesHandler interface for that can handle valid search moves params
type SearchMovesHandler interface {
	Handle(SearchMovesParams) middleware.Responder
}

// NewSearchMoves creates a new http.Handler for the search moves operation
func NewSearchMoves(ctx *middleware.Context, handler SearchMovesHandler) *SearchMoves {
	return &SearchMoves{Context: ctx, Handler: handler}
}

/* SearchMoves swagger:route GET /moves/search move searchMoves

Search moves by locator, DOD ID, or customer name

Search moves by locator, DOD ID, or customer name. Used by QAE and CSR users.


*/
type SearchMoves struct {
	Context *middleware.Context
	Handler SearchMovesHandler
}

func (o *SearchMoves) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSearchMovesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
