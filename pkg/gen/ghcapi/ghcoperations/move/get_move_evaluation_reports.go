// Code generated by go-swagger; DO NOT EDIT.

package move

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetMoveEvaluationReportsHandlerFunc turns a function with the right signature into a get move evaluation reports handler
type GetMoveEvaluationReportsHandlerFunc func(GetMoveEvaluationReportsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMoveEvaluationReportsHandlerFunc) Handle(params GetMoveEvaluationReportsParams) middleware.Responder {
	return fn(params)
}

// GetMoveEvaluationReportsHandler interface for that can handle valid get move evaluation reports params
type GetMoveEvaluationReportsHandler interface {
	Handle(GetMoveEvaluationReportsParams) middleware.Responder
}

// NewGetMoveEvaluationReports creates a new http.Handler for the get move evaluation reports operation
func NewGetMoveEvaluationReports(ctx *middleware.Context, handler GetMoveEvaluationReportsHandler) *GetMoveEvaluationReports {
	return &GetMoveEvaluationReports{Context: ctx, Handler: handler}
}

/* GetMoveEvaluationReports swagger:route GET /move/{locator}/evaluation-reports move getMoveEvaluationReports

Returns the history of an identified move

Returns the history for a given move for a unique alphanumeric locator string

*/
type GetMoveEvaluationReports struct {
	Context *middleware.Context
	Handler GetMoveEvaluationReportsHandler
}

func (o *GetMoveEvaluationReports) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetMoveEvaluationReportsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
