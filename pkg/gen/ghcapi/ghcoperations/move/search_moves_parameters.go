// Code generated by go-swagger; DO NOT EDIT.

package move

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewSearchMovesParams creates a new SearchMovesParams object
//
// There are no default values defined in the spec.
func NewSearchMovesParams() SearchMovesParams {

	return SearchMovesParams{}
}

// SearchMovesParams contains all the bound params for the search moves operation
// typically these are obtained from a http.Request
//
// swagger:parameters searchMoves
type SearchMovesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*DOD ID
	  Max Length: 10
	  Min Length: 10
	  In: query
	*/
	DodID *string
	/*Move locator
	  Max Length: 6
	  Min Length: 6
	  In: query
	*/
	Locator *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewSearchMovesParams() beforehand.
func (o *SearchMovesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDodID, qhkDodID, _ := qs.GetOK("dodID")
	if err := o.bindDodID(qDodID, qhkDodID, route.Formats); err != nil {
		res = append(res, err)
	}

	qLocator, qhkLocator, _ := qs.GetOK("locator")
	if err := o.bindLocator(qLocator, qhkLocator, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDodID binds and validates parameter DodID from query.
func (o *SearchMovesParams) bindDodID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.DodID = &raw

	if err := o.validateDodID(formats); err != nil {
		return err
	}

	return nil
}

// validateDodID carries on validations for parameter DodID
func (o *SearchMovesParams) validateDodID(formats strfmt.Registry) error {

	if err := validate.MinLength("dodID", "query", *o.DodID, 10); err != nil {
		return err
	}

	if err := validate.MaxLength("dodID", "query", *o.DodID, 10); err != nil {
		return err
	}

	return nil
}

// bindLocator binds and validates parameter Locator from query.
func (o *SearchMovesParams) bindLocator(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Locator = &raw

	if err := o.validateLocator(formats); err != nil {
		return err
	}

	return nil
}

// validateLocator carries on validations for parameter Locator
func (o *SearchMovesParams) validateLocator(formats strfmt.Registry) error {

	if err := validate.MinLength("locator", "query", *o.Locator, 6); err != nil {
		return err
	}

	if err := validate.MaxLength("locator", "query", *o.Locator, 6); err != nil {
		return err
	}

	return nil
}
