// Code generated by go-swagger; DO NOT EDIT.

package shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReviewShipmentAddressUpdateHandlerFunc turns a function with the right signature into a review shipment address update handler
type ReviewShipmentAddressUpdateHandlerFunc func(ReviewShipmentAddressUpdateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReviewShipmentAddressUpdateHandlerFunc) Handle(params ReviewShipmentAddressUpdateParams) middleware.Responder {
	return fn(params)
}

// ReviewShipmentAddressUpdateHandler interface for that can handle valid review shipment address update params
type ReviewShipmentAddressUpdateHandler interface {
	Handle(ReviewShipmentAddressUpdateParams) middleware.Responder
}

// NewReviewShipmentAddressUpdate creates a new http.Handler for the review shipment address update operation
func NewReviewShipmentAddressUpdate(ctx *middleware.Context, handler ReviewShipmentAddressUpdateHandler) *ReviewShipmentAddressUpdate {
	return &ReviewShipmentAddressUpdate{Context: ctx, Handler: handler}
}

/*
	ReviewShipmentAddressUpdate swagger:route PATCH /shipments/{shipmentID}/review-shipment-address-update shipment reviewShipmentAddressUpdate

# Allows TOO to review a shipment address update

Allows TOO to review a shipment address update
*/
type ReviewShipmentAddressUpdate struct {
	Context *middleware.Context
	Handler ReviewShipmentAddressUpdateHandler
}

func (o *ReviewShipmentAddressUpdate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewReviewShipmentAddressUpdateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ReviewShipmentAddressUpdateBody review shipment address update body
//
// swagger:model ReviewShipmentAddressUpdateBody
type ReviewShipmentAddressUpdateBody struct {

	// remarks
	Remarks string `json:"remarks,omitempty"`

	// status
	// Enum: [REQUESTED REJECTED APPROVED]
	Status string `json:"status,omitempty"`
}

// Validate validates this review shipment address update body
func (o *ReviewShipmentAddressUpdateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var reviewShipmentAddressUpdateBodyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["REQUESTED","REJECTED","APPROVED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		reviewShipmentAddressUpdateBodyTypeStatusPropEnum = append(reviewShipmentAddressUpdateBodyTypeStatusPropEnum, v)
	}
}

const (

	// ReviewShipmentAddressUpdateBodyStatusREQUESTED captures enum value "REQUESTED"
	ReviewShipmentAddressUpdateBodyStatusREQUESTED string = "REQUESTED"

	// ReviewShipmentAddressUpdateBodyStatusREJECTED captures enum value "REJECTED"
	ReviewShipmentAddressUpdateBodyStatusREJECTED string = "REJECTED"

	// ReviewShipmentAddressUpdateBodyStatusAPPROVED captures enum value "APPROVED"
	ReviewShipmentAddressUpdateBodyStatusAPPROVED string = "APPROVED"
)

// prop value enum
func (o *ReviewShipmentAddressUpdateBody) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, reviewShipmentAddressUpdateBodyTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ReviewShipmentAddressUpdateBody) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("body"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this review shipment address update body based on context it is used
func (o *ReviewShipmentAddressUpdateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ReviewShipmentAddressUpdateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReviewShipmentAddressUpdateBody) UnmarshalBinary(b []byte) error {
	var res ReviewShipmentAddressUpdateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
