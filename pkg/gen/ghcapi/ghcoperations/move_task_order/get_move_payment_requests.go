// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetMovePaymentRequestsHandlerFunc turns a function with the right signature into a get move payment requests handler
type GetMovePaymentRequestsHandlerFunc func(GetMovePaymentRequestsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMovePaymentRequestsHandlerFunc) Handle(params GetMovePaymentRequestsParams) middleware.Responder {
	return fn(params)
}

// GetMovePaymentRequestsHandler interface for that can handle valid get move payment requests params
type GetMovePaymentRequestsHandler interface {
	Handle(GetMovePaymentRequestsParams) middleware.Responder
}

// NewGetMovePaymentRequests creates a new http.Handler for the get move payment requests operation
func NewGetMovePaymentRequests(ctx *middleware.Context, handler GetMovePaymentRequestsHandler) *GetMovePaymentRequests {
	return &GetMovePaymentRequests{Context: ctx, Handler: handler}
}

/*GetMovePaymentRequests swagger:route GET /move-task-orders/{moveTaskOrderID}/payment-requests moveTaskOrder getMovePaymentRequests

Get list of all payment requests for a move

Get list of all payment requests for a move

*/
type GetMovePaymentRequests struct {
	Context *middleware.Context
	Handler GetMovePaymentRequestsHandler
}

func (o *GetMovePaymentRequests) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetMovePaymentRequestsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
