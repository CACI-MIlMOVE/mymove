// Code generated by go-swagger; DO NOT EDIT.

package mto_shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// PatchMTOShipmentStatusHandlerFunc turns a function with the right signature into a patch m t o shipment status handler
type PatchMTOShipmentStatusHandlerFunc func(PatchMTOShipmentStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchMTOShipmentStatusHandlerFunc) Handle(params PatchMTOShipmentStatusParams) middleware.Responder {
	return fn(params)
}

// PatchMTOShipmentStatusHandler interface for that can handle valid patch m t o shipment status params
type PatchMTOShipmentStatusHandler interface {
	Handle(PatchMTOShipmentStatusParams) middleware.Responder
}

// NewPatchMTOShipmentStatus creates a new http.Handler for the patch m t o shipment status operation
func NewPatchMTOShipmentStatus(ctx *middleware.Context, handler PatchMTOShipmentStatusHandler) *PatchMTOShipmentStatus {
	return &PatchMTOShipmentStatus{Context: ctx, Handler: handler}
}

/*PatchMTOShipmentStatus swagger:route PATCH /move_task_orders/{moveTaskOrderID}/mto_shipments/{shipmentID}/status mtoShipment patchMTOShipmentStatus

Updates a shipment's status

Updates a shipment's status

*/
type PatchMTOShipmentStatus struct {
	Context *middleware.Context
	Handler PatchMTOShipmentStatusHandler
}

func (o *PatchMTOShipmentStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchMTOShipmentStatusParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PatchMTOShipmentStatusBody patch m t o shipment status body
// swagger:model PatchMTOShipmentStatusBody
type PatchMTOShipmentStatusBody struct {

	// status
	// Enum: [APPROVED REJECTED]
	Status string `json:"status,omitempty"`
}

// Validate validates this patch m t o shipment status body
func (o *PatchMTOShipmentStatusBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var patchMTOShipmentStatusBodyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["APPROVED","REJECTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchMTOShipmentStatusBodyTypeStatusPropEnum = append(patchMTOShipmentStatusBodyTypeStatusPropEnum, v)
	}
}

const (

	// PatchMTOShipmentStatusBodyStatusAPPROVED captures enum value "APPROVED"
	PatchMTOShipmentStatusBodyStatusAPPROVED string = "APPROVED"

	// PatchMTOShipmentStatusBodyStatusREJECTED captures enum value "REJECTED"
	PatchMTOShipmentStatusBodyStatusREJECTED string = "REJECTED"
)

// prop value enum
func (o *PatchMTOShipmentStatusBody) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, patchMTOShipmentStatusBodyTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *PatchMTOShipmentStatusBody) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("body"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchMTOShipmentStatusBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchMTOShipmentStatusBody) UnmarshalBinary(b []byte) error {
	var res PatchMTOShipmentStatusBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
