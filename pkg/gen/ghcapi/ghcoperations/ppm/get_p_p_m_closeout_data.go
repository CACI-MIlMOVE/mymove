// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetPPMCloseoutDataHandlerFunc turns a function with the right signature into a get p p m closeout data handler
type GetPPMCloseoutDataHandlerFunc func(GetPPMCloseoutDataParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPPMCloseoutDataHandlerFunc) Handle(params GetPPMCloseoutDataParams) middleware.Responder {
	return fn(params)
}

// GetPPMCloseoutDataHandler interface for that can handle valid get p p m closeout data params
type GetPPMCloseoutDataHandler interface {
	Handle(GetPPMCloseoutDataParams) middleware.Responder
}

// NewGetPPMCloseoutData creates a new http.Handler for the get p p m closeout data operation
func NewGetPPMCloseoutData(ctx *middleware.Context, handler GetPPMCloseoutDataHandler) *GetPPMCloseoutData {
	return &GetPPMCloseoutData{Context: ctx, Handler: handler}
}

/*
	GetPPMCloseoutData swagger:route GET /ppm-shipments/{ppmShipmentId}/closeout ppm getPPMCloseoutData

# Get the closeout data for the specified PPM shipment

Retrieves the closeout data for the specified PPM shipment.
*/
type GetPPMCloseoutData struct {
	Context *middleware.Context
	Handler GetPPMCloseoutDataHandler
}

func (o *GetPPMCloseoutData) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetPPMCloseoutDataParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
