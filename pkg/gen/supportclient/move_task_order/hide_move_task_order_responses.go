// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/transcom/mymove/pkg/gen/supportmessages"
)

// HideMoveTaskOrderReader is a Reader for the HideMoveTaskOrder structure.
type HideMoveTaskOrderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HideMoveTaskOrderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewHideMoveTaskOrderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewHideMoveTaskOrderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewHideMoveTaskOrderUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewHideMoveTaskOrderForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewHideMoveTaskOrderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewHideMoveTaskOrderPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewHideMoveTaskOrderUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewHideMoveTaskOrderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewHideMoveTaskOrderOK creates a HideMoveTaskOrderOK with default headers values
func NewHideMoveTaskOrderOK() *HideMoveTaskOrderOK {
	return &HideMoveTaskOrderOK{}
}

/*HideMoveTaskOrderOK handles this case with default header values.

Successfully hid MTO.
*/
type HideMoveTaskOrderOK struct {
	Payload *supportmessages.MoveTaskOrder
}

func (o *HideMoveTaskOrderOK) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/hide][%d] hideMoveTaskOrderOK  %+v", 200, o.Payload)
}

func (o *HideMoveTaskOrderOK) GetPayload() *supportmessages.MoveTaskOrder {
	return o.Payload
}

func (o *HideMoveTaskOrderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.MoveTaskOrder)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHideMoveTaskOrderBadRequest creates a HideMoveTaskOrderBadRequest with default headers values
func NewHideMoveTaskOrderBadRequest() *HideMoveTaskOrderBadRequest {
	return &HideMoveTaskOrderBadRequest{}
}

/*HideMoveTaskOrderBadRequest handles this case with default header values.

The request payload is invalid.
*/
type HideMoveTaskOrderBadRequest struct {
	Payload *supportmessages.ClientError
}

func (o *HideMoveTaskOrderBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/hide][%d] hideMoveTaskOrderBadRequest  %+v", 400, o.Payload)
}

func (o *HideMoveTaskOrderBadRequest) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *HideMoveTaskOrderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHideMoveTaskOrderUnauthorized creates a HideMoveTaskOrderUnauthorized with default headers values
func NewHideMoveTaskOrderUnauthorized() *HideMoveTaskOrderUnauthorized {
	return &HideMoveTaskOrderUnauthorized{}
}

/*HideMoveTaskOrderUnauthorized handles this case with default header values.

The request was denied.
*/
type HideMoveTaskOrderUnauthorized struct {
	Payload *supportmessages.ClientError
}

func (o *HideMoveTaskOrderUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/hide][%d] hideMoveTaskOrderUnauthorized  %+v", 401, o.Payload)
}

func (o *HideMoveTaskOrderUnauthorized) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *HideMoveTaskOrderUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHideMoveTaskOrderForbidden creates a HideMoveTaskOrderForbidden with default headers values
func NewHideMoveTaskOrderForbidden() *HideMoveTaskOrderForbidden {
	return &HideMoveTaskOrderForbidden{}
}

/*HideMoveTaskOrderForbidden handles this case with default header values.

The request was denied.
*/
type HideMoveTaskOrderForbidden struct {
	Payload *supportmessages.ClientError
}

func (o *HideMoveTaskOrderForbidden) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/hide][%d] hideMoveTaskOrderForbidden  %+v", 403, o.Payload)
}

func (o *HideMoveTaskOrderForbidden) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *HideMoveTaskOrderForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHideMoveTaskOrderNotFound creates a HideMoveTaskOrderNotFound with default headers values
func NewHideMoveTaskOrderNotFound() *HideMoveTaskOrderNotFound {
	return &HideMoveTaskOrderNotFound{}
}

/*HideMoveTaskOrderNotFound handles this case with default header values.

The requested resource wasn't found.
*/
type HideMoveTaskOrderNotFound struct {
	Payload *supportmessages.ClientError
}

func (o *HideMoveTaskOrderNotFound) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/hide][%d] hideMoveTaskOrderNotFound  %+v", 404, o.Payload)
}

func (o *HideMoveTaskOrderNotFound) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *HideMoveTaskOrderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHideMoveTaskOrderPreconditionFailed creates a HideMoveTaskOrderPreconditionFailed with default headers values
func NewHideMoveTaskOrderPreconditionFailed() *HideMoveTaskOrderPreconditionFailed {
	return &HideMoveTaskOrderPreconditionFailed{}
}

/*HideMoveTaskOrderPreconditionFailed handles this case with default header values.

Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.
*/
type HideMoveTaskOrderPreconditionFailed struct {
	Payload *supportmessages.ClientError
}

func (o *HideMoveTaskOrderPreconditionFailed) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/hide][%d] hideMoveTaskOrderPreconditionFailed  %+v", 412, o.Payload)
}

func (o *HideMoveTaskOrderPreconditionFailed) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *HideMoveTaskOrderPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHideMoveTaskOrderUnprocessableEntity creates a HideMoveTaskOrderUnprocessableEntity with default headers values
func NewHideMoveTaskOrderUnprocessableEntity() *HideMoveTaskOrderUnprocessableEntity {
	return &HideMoveTaskOrderUnprocessableEntity{}
}

/*HideMoveTaskOrderUnprocessableEntity handles this case with default header values.

The payload was unprocessable.
*/
type HideMoveTaskOrderUnprocessableEntity struct {
	Payload *supportmessages.ValidationError
}

func (o *HideMoveTaskOrderUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/hide][%d] hideMoveTaskOrderUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *HideMoveTaskOrderUnprocessableEntity) GetPayload() *supportmessages.ValidationError {
	return o.Payload
}

func (o *HideMoveTaskOrderUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHideMoveTaskOrderInternalServerError creates a HideMoveTaskOrderInternalServerError with default headers values
func NewHideMoveTaskOrderInternalServerError() *HideMoveTaskOrderInternalServerError {
	return &HideMoveTaskOrderInternalServerError{}
}

/*HideMoveTaskOrderInternalServerError handles this case with default header values.

A server error occurred.
*/
type HideMoveTaskOrderInternalServerError struct {
	Payload *supportmessages.Error
}

func (o *HideMoveTaskOrderInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/hide][%d] hideMoveTaskOrderInternalServerError  %+v", 500, o.Payload)
}

func (o *HideMoveTaskOrderInternalServerError) GetPayload() *supportmessages.Error {
	return o.Payload
}

func (o *HideMoveTaskOrderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
