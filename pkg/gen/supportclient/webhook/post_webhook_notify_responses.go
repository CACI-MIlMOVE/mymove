// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// PostWebhookNotifyReader is a Reader for the PostWebhookNotify structure.
type PostWebhookNotifyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostWebhookNotifyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostWebhookNotifyCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostWebhookNotifyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostWebhookNotifyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostWebhookNotifyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostWebhookNotifyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostWebhookNotifyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostWebhookNotifyCreated creates a PostWebhookNotifyCreated with default headers values
func NewPostWebhookNotifyCreated() *PostWebhookNotifyCreated {
	return &PostWebhookNotifyCreated{}
}

/*PostWebhookNotifyCreated handles this case with default header values.

Created
*/
type PostWebhookNotifyCreated struct {
	Payload *PostWebhookNotifyCreatedBody
}

func (o *PostWebhookNotifyCreated) Error() string {
	return fmt.Sprintf("[POST /webhook-notify][%d] postWebhookNotifyCreated  %+v", 201, o.Payload)
}

func (o *PostWebhookNotifyCreated) GetPayload() *PostWebhookNotifyCreatedBody {
	return o.Payload
}

func (o *PostWebhookNotifyCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostWebhookNotifyCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostWebhookNotifyBadRequest creates a PostWebhookNotifyBadRequest with default headers values
func NewPostWebhookNotifyBadRequest() *PostWebhookNotifyBadRequest {
	return &PostWebhookNotifyBadRequest{}
}

/*PostWebhookNotifyBadRequest handles this case with default header values.

Bad request
*/
type PostWebhookNotifyBadRequest struct {
}

func (o *PostWebhookNotifyBadRequest) Error() string {
	return fmt.Sprintf("[POST /webhook-notify][%d] postWebhookNotifyBadRequest ", 400)
}

func (o *PostWebhookNotifyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostWebhookNotifyUnauthorized creates a PostWebhookNotifyUnauthorized with default headers values
func NewPostWebhookNotifyUnauthorized() *PostWebhookNotifyUnauthorized {
	return &PostWebhookNotifyUnauthorized{}
}

/*PostWebhookNotifyUnauthorized handles this case with default header values.

must be authenticated to use this endpoint
*/
type PostWebhookNotifyUnauthorized struct {
}

func (o *PostWebhookNotifyUnauthorized) Error() string {
	return fmt.Sprintf("[POST /webhook-notify][%d] postWebhookNotifyUnauthorized ", 401)
}

func (o *PostWebhookNotifyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostWebhookNotifyForbidden creates a PostWebhookNotifyForbidden with default headers values
func NewPostWebhookNotifyForbidden() *PostWebhookNotifyForbidden {
	return &PostWebhookNotifyForbidden{}
}

/*PostWebhookNotifyForbidden handles this case with default header values.

Forbidden
*/
type PostWebhookNotifyForbidden struct {
}

func (o *PostWebhookNotifyForbidden) Error() string {
	return fmt.Sprintf("[POST /webhook-notify][%d] postWebhookNotifyForbidden ", 403)
}

func (o *PostWebhookNotifyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostWebhookNotifyNotFound creates a PostWebhookNotifyNotFound with default headers values
func NewPostWebhookNotifyNotFound() *PostWebhookNotifyNotFound {
	return &PostWebhookNotifyNotFound{}
}

/*PostWebhookNotifyNotFound handles this case with default header values.

No orders found
*/
type PostWebhookNotifyNotFound struct {
}

func (o *PostWebhookNotifyNotFound) Error() string {
	return fmt.Sprintf("[POST /webhook-notify][%d] postWebhookNotifyNotFound ", 404)
}

func (o *PostWebhookNotifyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostWebhookNotifyInternalServerError creates a PostWebhookNotifyInternalServerError with default headers values
func NewPostWebhookNotifyInternalServerError() *PostWebhookNotifyInternalServerError {
	return &PostWebhookNotifyInternalServerError{}
}

/*PostWebhookNotifyInternalServerError handles this case with default header values.

Server error
*/
type PostWebhookNotifyInternalServerError struct {
}

func (o *PostWebhookNotifyInternalServerError) Error() string {
	return fmt.Sprintf("[POST /webhook-notify][%d] postWebhookNotifyInternalServerError ", 500)
}

func (o *PostWebhookNotifyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PostWebhookNotifyBody post webhook notify body
swagger:model PostWebhookNotifyBody
*/
type PostWebhookNotifyBody struct {

	// Name of event triggered
	// Required: true
	EventName *string `json:"eventName"`

	// id
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// object
	// Required: true
	Object *string `json:"object"`

	// The type of object that's being updated
	// Required: true
	ObjectType *string `json:"objectType"`

	// Time representing when the event was triggered
	// Required: true
	// Format: date-time
	TriggeredAt *strfmt.DateTime `json:"triggeredAt"`
}

// Validate validates this post webhook notify body
func (o *PostWebhookNotifyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEventName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateObject(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateObjectType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTriggeredAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostWebhookNotifyBody) validateEventName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"eventName", "body", o.EventName); err != nil {
		return err
	}

	return nil
}

func (o *PostWebhookNotifyBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("body"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostWebhookNotifyBody) validateObject(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"object", "body", o.Object); err != nil {
		return err
	}

	return nil
}

func (o *PostWebhookNotifyBody) validateObjectType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"objectType", "body", o.ObjectType); err != nil {
		return err
	}

	return nil
}

func (o *PostWebhookNotifyBody) validateTriggeredAt(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"triggeredAt", "body", o.TriggeredAt); err != nil {
		return err
	}

	if err := validate.FormatOf("body"+"."+"triggeredAt", "body", "date-time", o.TriggeredAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostWebhookNotifyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostWebhookNotifyBody) UnmarshalBinary(b []byte) error {
	var res PostWebhookNotifyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostWebhookNotifyCreatedBody post webhook notify created body
swagger:model PostWebhookNotifyCreatedBody
*/
type PostWebhookNotifyCreatedBody struct {

	// Name of event triggered
	EventName string `json:"eventName,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// object
	Object string `json:"object,omitempty"`

	// The type of object that's being updated
	ObjectType string `json:"objectType,omitempty"`

	// Time representing when the event was triggered
	// Format: date-time
	TriggeredAt strfmt.DateTime `json:"triggeredAt,omitempty"`
}

// Validate validates this post webhook notify created body
func (o *PostWebhookNotifyCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTriggeredAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostWebhookNotifyCreatedBody) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("postWebhookNotifyCreated"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostWebhookNotifyCreatedBody) validateTriggeredAt(formats strfmt.Registry) error {

	if swag.IsZero(o.TriggeredAt) { // not required
		return nil
	}

	if err := validate.FormatOf("postWebhookNotifyCreated"+"."+"triggeredAt", "body", "date-time", o.TriggeredAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostWebhookNotifyCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostWebhookNotifyCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostWebhookNotifyCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
