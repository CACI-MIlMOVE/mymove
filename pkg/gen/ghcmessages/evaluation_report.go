// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EvaluationReport An evaluation report
//
// swagger:model EvaluationReport
type EvaluationReport struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// evaluation length minutes
	// Minimum: 0
	EvaluationLengthMinutes *int64 `json:"evaluationLengthMinutes,omitempty"`

	// id
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// inspection date
	// Format: date-time
	InspectionDate *strfmt.DateTime `json:"inspectionDate,omitempty"`

	// inspection type
	// Enum: [DATA_REVIEW PHYSICAL VIRTUAL]
	InspectionType *string `json:"inspectionType,omitempty"`

	// location
	// Enum: [ORIGIN DESTINATION OTHER]
	Location *string `json:"location,omitempty"`

	// location description
	// Example: asdfasdfsd
	LocationDescription *string `json:"locationDescription,omitempty"`

	// move ID
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	MoveID strfmt.UUID `json:"moveID,omitempty"`

	// observed date
	// Format: date-time
	ObservedDate *strfmt.DateTime `json:"observedDate,omitempty"`

	// remarks
	Remarks *string `json:"remarks,omitempty"`

	// shipment ID
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	ShipmentID *strfmt.UUID `json:"shipmentID,omitempty"`

	// submitted at
	// Format: date-time
	SubmittedAt *strfmt.DateTime `json:"submittedAt,omitempty"`

	// travel time minutes
	// Minimum: 0
	TravelTimeMinutes *int64 `json:"travelTimeMinutes,omitempty"`

	// type
	// Enum: [SHIPMENT COUNSELING]
	Type string `json:"type,omitempty"`

	// violations observed
	ViolationsObserved *bool `json:"violationsObserved,omitempty"`
}

// Validate validates this evaluation report
func (m *EvaluationReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvaluationLengthMinutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInspectionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInspectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoveID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObservedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmittedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTravelTimeMinutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvaluationReport) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationReport) validateEvaluationLengthMinutes(formats strfmt.Registry) error {
	if swag.IsZero(m.EvaluationLengthMinutes) { // not required
		return nil
	}

	if err := validate.MinimumInt("evaluationLengthMinutes", "body", *m.EvaluationLengthMinutes, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationReport) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationReport) validateInspectionDate(formats strfmt.Registry) error {
	if swag.IsZero(m.InspectionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("inspectionDate", "body", "date-time", m.InspectionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var evaluationReportTypeInspectionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DATA_REVIEW","PHYSICAL","VIRTUAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		evaluationReportTypeInspectionTypePropEnum = append(evaluationReportTypeInspectionTypePropEnum, v)
	}
}

const (

	// EvaluationReportInspectionTypeDATAREVIEW captures enum value "DATA_REVIEW"
	EvaluationReportInspectionTypeDATAREVIEW string = "DATA_REVIEW"

	// EvaluationReportInspectionTypePHYSICAL captures enum value "PHYSICAL"
	EvaluationReportInspectionTypePHYSICAL string = "PHYSICAL"

	// EvaluationReportInspectionTypeVIRTUAL captures enum value "VIRTUAL"
	EvaluationReportInspectionTypeVIRTUAL string = "VIRTUAL"
)

// prop value enum
func (m *EvaluationReport) validateInspectionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, evaluationReportTypeInspectionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EvaluationReport) validateInspectionType(formats strfmt.Registry) error {
	if swag.IsZero(m.InspectionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateInspectionTypeEnum("inspectionType", "body", *m.InspectionType); err != nil {
		return err
	}

	return nil
}

var evaluationReportTypeLocationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ORIGIN","DESTINATION","OTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		evaluationReportTypeLocationPropEnum = append(evaluationReportTypeLocationPropEnum, v)
	}
}

const (

	// EvaluationReportLocationORIGIN captures enum value "ORIGIN"
	EvaluationReportLocationORIGIN string = "ORIGIN"

	// EvaluationReportLocationDESTINATION captures enum value "DESTINATION"
	EvaluationReportLocationDESTINATION string = "DESTINATION"

	// EvaluationReportLocationOTHER captures enum value "OTHER"
	EvaluationReportLocationOTHER string = "OTHER"
)

// prop value enum
func (m *EvaluationReport) validateLocationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, evaluationReportTypeLocationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EvaluationReport) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	// value enum
	if err := m.validateLocationEnum("location", "body", *m.Location); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationReport) validateMoveID(formats strfmt.Registry) error {
	if swag.IsZero(m.MoveID) { // not required
		return nil
	}

	if err := validate.FormatOf("moveID", "body", "uuid", m.MoveID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationReport) validateObservedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ObservedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("observedDate", "body", "date-time", m.ObservedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationReport) validateShipmentID(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentID) { // not required
		return nil
	}

	if err := validate.FormatOf("shipmentID", "body", "uuid", m.ShipmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationReport) validateSubmittedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.SubmittedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("submittedAt", "body", "date-time", m.SubmittedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationReport) validateTravelTimeMinutes(formats strfmt.Registry) error {
	if swag.IsZero(m.TravelTimeMinutes) { // not required
		return nil
	}

	if err := validate.MinimumInt("travelTimeMinutes", "body", *m.TravelTimeMinutes, 0, false); err != nil {
		return err
	}

	return nil
}

var evaluationReportTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SHIPMENT","COUNSELING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		evaluationReportTypeTypePropEnum = append(evaluationReportTypeTypePropEnum, v)
	}
}

const (

	// EvaluationReportTypeSHIPMENT captures enum value "SHIPMENT"
	EvaluationReportTypeSHIPMENT string = "SHIPMENT"

	// EvaluationReportTypeCOUNSELING captures enum value "COUNSELING"
	EvaluationReportTypeCOUNSELING string = "COUNSELING"
)

// prop value enum
func (m *EvaluationReport) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, evaluationReportTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EvaluationReport) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this evaluation report based on context it is used
func (m *EvaluationReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EvaluationReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EvaluationReport) UnmarshalBinary(b []byte) error {
	var res EvaluationReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
