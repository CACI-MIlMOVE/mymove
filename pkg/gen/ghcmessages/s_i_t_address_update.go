// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SITAddressUpdate An update to a SIT service item address.
//
// swagger:model SITAddressUpdate
type SITAddressUpdate struct {

	// contractor remarks
	// Example: We need SIT additional days. The customer has not found a house yet.
	ContractorRemarks *string `json:"contractorRemarks"`

	// distance
	Distance int64 `json:"distance,omitempty"`

	// id
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// mto service item ID
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	MtoServiceItemID strfmt.UUID `json:"mtoServiceItemID,omitempty"`

	// new address
	NewAddress *Address `json:"newAddress,omitempty"`

	// office remarks
	// Example: We need SIT additional days. The customer has not found a house yet.
	OfficeRemarks *string `json:"officeRemarks"`

	// old address
	OldAddress *Address `json:"oldAddress,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`

	// status
	// Enum: [REQUESTED APPROVED REJECTED]
	Status interface{} `json:"status,omitempty"`
}

// Validate validates this s i t address update
func (m *SITAddressUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtoServiceItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOldAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SITAddressUpdate) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SITAddressUpdate) validateMtoServiceItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.MtoServiceItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("mtoServiceItemID", "body", "uuid", m.MtoServiceItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SITAddressUpdate) validateNewAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.NewAddress) { // not required
		return nil
	}

	if m.NewAddress != nil {
		if err := m.NewAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newAddress")
			}
			return err
		}
	}

	return nil
}

func (m *SITAddressUpdate) validateOldAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.OldAddress) { // not required
		return nil
	}

	if m.OldAddress != nil {
		if err := m.OldAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oldAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oldAddress")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this s i t address update based on the context it is used
func (m *SITAddressUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNewAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOldAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SITAddressUpdate) contextValidateNewAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.NewAddress != nil {
		if err := m.NewAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newAddress")
			}
			return err
		}
	}

	return nil
}

func (m *SITAddressUpdate) contextValidateOldAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.OldAddress != nil {
		if err := m.OldAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oldAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oldAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SITAddressUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SITAddressUpdate) UnmarshalBinary(b []byte) error {
	var res SITAddressUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
