// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateShipment update shipment
//
// swagger:model UpdateShipment
type UpdateShipment struct {

	// agents
	Agents MTOAgents `json:"agents,omitempty"`

	// estimated weight of the shuttle service item provided by the prime
	// Example: 2500
	BillableWeightCap *int64 `json:"billableWeightCap,omitempty"`

	// billable weight justification
	// Example: more weight than expected
	BillableWeightJustification *string `json:"billableWeightJustification,omitempty"`

	// counselor remarks
	// Example: counselor approved
	CounselorRemarks *string `json:"counselorRemarks,omitempty"`

	// customer remarks
	// Example: handle with care
	CustomerRemarks *string `json:"customerRemarks,omitempty"`

	// destination address
	DestinationAddress struct {
		Address
	} `json:"destinationAddress,omitempty"`

	// pickup address
	PickupAddress struct {
		Address
	} `json:"pickupAddress,omitempty"`

	// requested delivery date
	// Format: date
	RequestedDeliveryDate *strfmt.Date `json:"requestedDeliveryDate,omitempty"`

	// requested pickup date
	// Format: date
	RequestedPickupDate *strfmt.Date `json:"requestedPickupDate,omitempty"`

	// The SAC type that will be used for the shipment
	// Example: HHG
	// Enum: [HHG NTS]
	SacType *string `json:"sacType,omitempty"`

	// shipment type
	ShipmentType MTOShipmentType `json:"shipmentType,omitempty"`

	// The TAC type that will be used for the shipment
	// Example: HHG
	// Enum: [HHG NTS]
	TacType *string `json:"tacType,omitempty"`
}

// Validate validates this update shipment
func (m *UpdateShipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedPickupDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSacType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTacType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateShipment) validateAgents(formats strfmt.Registry) error {
	if swag.IsZero(m.Agents) { // not required
		return nil
	}

	if err := m.Agents.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("agents")
		}
		return err
	}

	return nil
}

func (m *UpdateShipment) validateDestinationAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationAddress) { // not required
		return nil
	}

	return nil
}

func (m *UpdateShipment) validatePickupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.PickupAddress) { // not required
		return nil
	}

	return nil
}

func (m *UpdateShipment) validateRequestedDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedDeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedDeliveryDate", "body", "date", m.RequestedDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateShipment) validateRequestedPickupDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedPickupDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedPickupDate", "body", "date", m.RequestedPickupDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var updateShipmentTypeSacTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HHG","NTS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateShipmentTypeSacTypePropEnum = append(updateShipmentTypeSacTypePropEnum, v)
	}
}

const (

	// UpdateShipmentSacTypeHHG captures enum value "HHG"
	UpdateShipmentSacTypeHHG string = "HHG"

	// UpdateShipmentSacTypeNTS captures enum value "NTS"
	UpdateShipmentSacTypeNTS string = "NTS"
)

// prop value enum
func (m *UpdateShipment) validateSacTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateShipmentTypeSacTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateShipment) validateSacType(formats strfmt.Registry) error {
	if swag.IsZero(m.SacType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSacTypeEnum("sacType", "body", *m.SacType); err != nil {
		return err
	}

	return nil
}

func (m *UpdateShipment) validateShipmentType(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentType) { // not required
		return nil
	}

	if err := m.ShipmentType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("shipmentType")
		}
		return err
	}

	return nil
}

var updateShipmentTypeTacTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HHG","NTS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateShipmentTypeTacTypePropEnum = append(updateShipmentTypeTacTypePropEnum, v)
	}
}

const (

	// UpdateShipmentTacTypeHHG captures enum value "HHG"
	UpdateShipmentTacTypeHHG string = "HHG"

	// UpdateShipmentTacTypeNTS captures enum value "NTS"
	UpdateShipmentTacTypeNTS string = "NTS"
)

// prop value enum
func (m *UpdateShipment) validateTacTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateShipmentTypeTacTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateShipment) validateTacType(formats strfmt.Registry) error {
	if swag.IsZero(m.TacType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTacTypeEnum("tacType", "body", *m.TacType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update shipment based on the context it is used
func (m *UpdateShipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateShipment) contextValidateAgents(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Agents.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("agents")
		}
		return err
	}

	return nil
}

func (m *UpdateShipment) contextValidateDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *UpdateShipment) contextValidatePickupAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *UpdateShipment) contextValidateShipmentType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ShipmentType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("shipmentType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateShipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateShipment) UnmarshalBinary(b []byte) error {
	var res UpdateShipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
