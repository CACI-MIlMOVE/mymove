// Code generated by go-swagger; DO NOT EDIT.

package adminmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClientCert client cert
//
// swagger:model ClientCert
type ClientCert struct {

	// allow air force orders read
	AllowAirForceOrdersRead bool `json:"allowAirForceOrdersRead,omitempty"`

	// allow air force orders write
	AllowAirForceOrdersWrite bool `json:"allowAirForceOrdersWrite,omitempty"`

	// allow army orders read
	AllowArmyOrdersRead bool `json:"allowArmyOrdersRead,omitempty"`

	// allow army orders write
	AllowArmyOrdersWrite bool `json:"allowArmyOrdersWrite,omitempty"`

	// allow coast guard orders read
	AllowCoastGuardOrdersRead bool `json:"allowCoastGuardOrdersRead,omitempty"`

	// allow coast guard orders write
	AllowCoastGuardOrdersWrite bool `json:"allowCoastGuardOrdersWrite,omitempty"`

	// allow dps auth API
	AllowDpsAuthAPI bool `json:"allowDpsAuthAPI,omitempty"`

	// allow marine corps orders read
	AllowMarineCorpsOrdersRead bool `json:"allowMarineCorpsOrdersRead,omitempty"`

	// allow marine corps orders write
	AllowMarineCorpsOrdersWrite bool `json:"allowMarineCorpsOrdersWrite,omitempty"`

	// allow navy orders read
	AllowNavyOrdersRead bool `json:"allowNavyOrdersRead,omitempty"`

	// allow navy orders write
	AllowNavyOrdersWrite bool `json:"allowNavyOrdersWrite,omitempty"`

	// allow orders API
	AllowOrdersAPI bool `json:"allowOrdersAPI,omitempty"`

	// allow prime
	AllowPrime bool `json:"allowPrime,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// sha256 digest
	// Example: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
	Sha256Digest string `json:"sha256Digest,omitempty"`

	// subject
	// Example: CN=example-user,OU=DoD+OU=PKI+OU=CONTRACTOR,O=U.S. Government,C=US
	Subject string `json:"subject,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// user Id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	UserID strfmt.UUID `json:"userId,omitempty"`
}

// Validate validates this client cert
func (m *ClientCert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClientCert) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ClientCert) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ClientCert) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ClientCert) validateUserID(formats strfmt.Registry) error {
	if swag.IsZero(m.UserID) { // not required
		return nil
	}

	if err := validate.FormatOf("userId", "body", "uuid", m.UserID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this client cert based on context it is used
func (m *ClientCert) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClientCert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClientCert) UnmarshalBinary(b []byte) error {
	var res ClientCert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
