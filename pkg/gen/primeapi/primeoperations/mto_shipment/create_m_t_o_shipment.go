// Code generated by go-swagger; DO NOT EDIT.

package mto_shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	primemessages "github.com/transcom/mymove/pkg/gen/primemessages"
)

// CreateMTOShipmentHandlerFunc turns a function with the right signature into a create m t o shipment handler
type CreateMTOShipmentHandlerFunc func(CreateMTOShipmentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateMTOShipmentHandlerFunc) Handle(params CreateMTOShipmentParams) middleware.Responder {
	return fn(params)
}

// CreateMTOShipmentHandler interface for that can handle valid create m t o shipment params
type CreateMTOShipmentHandler interface {
	Handle(CreateMTOShipmentParams) middleware.Responder
}

// NewCreateMTOShipment creates a new http.Handler for the create m t o shipment operation
func NewCreateMTOShipment(ctx *middleware.Context, handler CreateMTOShipmentHandler) *CreateMTOShipment {
	return &CreateMTOShipment{Context: ctx, Handler: handler}
}

/*CreateMTOShipment swagger:route POST /move_task_orders/{moveTaskOrderID}/mto_shipments mtoShipment prime createMTOShipment

Creates a shipment for a move task order

Creates an instance of shipments tied to amove task order

*/
type CreateMTOShipment struct {
	Context *middleware.Context
	Handler CreateMTOShipmentHandler
}

func (o *CreateMTOShipment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateMTOShipmentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateMTOShipmentBody create m t o shipment body
// swagger:model CreateMTOShipmentBody
type CreateMTOShipmentBody struct {

	// customer remarks
	CustomerRemarks string `json:"customerRemarks,omitempty"`

	// delivery address
	// Required: true
	DeliveryAddress *primemessages.Address `json:"deliveryAddress"`

	// pickup address
	// Required: true
	PickupAddress *primemessages.Address `json:"pickupAddress"`

	// requested pickup date
	// Required: true
	// Format: date
	RequestedPickupDate *strfmt.Date `json:"requestedPickupDate"`

	// scheduled pickup date
	// Required: true
	// Format: date
	ScheduledPickupDate *strfmt.Date `json:"scheduledPickupDate"`

	// secondary delivery address
	SecondaryDeliveryAddress *primemessages.Address `json:"secondaryDeliveryAddress,omitempty"`

	// secondary pickup address
	SecondaryPickupAddress *primemessages.Address `json:"secondaryPickupAddress,omitempty"`

	// shipment type
	// Required: true
	// Enum: [HHG INTERNATIONAL_HHG INTERNATIONAL_UB]
	ShipmentType interface{} `json:"shipmentType"`
}

// Validate validates this create m t o shipment body
func (o *CreateMTOShipmentBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeliveryAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRequestedPickupDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateScheduledPickupDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecondaryDeliveryAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecondaryPickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShipmentType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateMTOShipmentBody) validateDeliveryAddress(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"deliveryAddress", "body", o.DeliveryAddress); err != nil {
		return err
	}

	if o.DeliveryAddress != nil {
		if err := o.DeliveryAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "deliveryAddress")
			}
			return err
		}
	}

	return nil
}

func (o *CreateMTOShipmentBody) validatePickupAddress(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"pickupAddress", "body", o.PickupAddress); err != nil {
		return err
	}

	if o.PickupAddress != nil {
		if err := o.PickupAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "pickupAddress")
			}
			return err
		}
	}

	return nil
}

func (o *CreateMTOShipmentBody) validateRequestedPickupDate(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"requestedPickupDate", "body", o.RequestedPickupDate); err != nil {
		return err
	}

	if err := validate.FormatOf("body"+"."+"requestedPickupDate", "body", "date", o.RequestedPickupDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *CreateMTOShipmentBody) validateScheduledPickupDate(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"scheduledPickupDate", "body", o.ScheduledPickupDate); err != nil {
		return err
	}

	if err := validate.FormatOf("body"+"."+"scheduledPickupDate", "body", "date", o.ScheduledPickupDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *CreateMTOShipmentBody) validateSecondaryDeliveryAddress(formats strfmt.Registry) error {

	if swag.IsZero(o.SecondaryDeliveryAddress) { // not required
		return nil
	}

	if o.SecondaryDeliveryAddress != nil {
		if err := o.SecondaryDeliveryAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "secondaryDeliveryAddress")
			}
			return err
		}
	}

	return nil
}

func (o *CreateMTOShipmentBody) validateSecondaryPickupAddress(formats strfmt.Registry) error {

	if swag.IsZero(o.SecondaryPickupAddress) { // not required
		return nil
	}

	if o.SecondaryPickupAddress != nil {
		if err := o.SecondaryPickupAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "secondaryPickupAddress")
			}
			return err
		}
	}

	return nil
}

var createMTOShipmentBodyTypeShipmentTypePropEnum []interface{}

func init() {
	var res []interface{}
	if err := json.Unmarshal([]byte(`["HHG","INTERNATIONAL_HHG","INTERNATIONAL_UB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createMTOShipmentBodyTypeShipmentTypePropEnum = append(createMTOShipmentBodyTypeShipmentTypePropEnum, v)
	}
}

// prop value enum
func (o *CreateMTOShipmentBody) validateShipmentTypeEnum(path, location string, value interface{}) error {
	if err := validate.Enum(path, location, value, createMTOShipmentBodyTypeShipmentTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *CreateMTOShipmentBody) validateShipmentType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"shipmentType", "body", o.ShipmentType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateMTOShipmentBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateMTOShipmentBody) UnmarshalBinary(b []byte) error {
	var res CreateMTOShipmentBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
