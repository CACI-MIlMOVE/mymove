// Code generated by go-swagger; DO NOT EDIT.

package mto_service_item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RequestSITAddressUpdateHandlerFunc turns a function with the right signature into a request s i t address update handler
type RequestSITAddressUpdateHandlerFunc func(RequestSITAddressUpdateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RequestSITAddressUpdateHandlerFunc) Handle(params RequestSITAddressUpdateParams) middleware.Responder {
	return fn(params)
}

// RequestSITAddressUpdateHandler interface for that can handle valid request s i t address update params
type RequestSITAddressUpdateHandler interface {
	Handle(RequestSITAddressUpdateParams) middleware.Responder
}

// NewRequestSITAddressUpdate creates a new http.Handler for the request s i t address update operation
func NewRequestSITAddressUpdate(ctx *middleware.Context, handler RequestSITAddressUpdateHandler) *RequestSITAddressUpdate {
	return &RequestSITAddressUpdate{Context: ctx, Handler: handler}
}

/*
	RequestSITAddressUpdate swagger:route POST /sit-address-updates mtoServiceItem requestSITAddressUpdate

requestSITAddressUpdate

**Functionality:**
Creates an update request for a SIT service item's final delivery address.
A newly created update request is assigned the status 'REQUESTED'.

**Limitations:**
The update can be requested for APPROVED service items only.
This endpoint is only for updates that exceed a 50 mile distance from the
original delivery address of the service item being updated. If the distance
is less than 50 miles, the prime can make the update themselves via UpdateMTOServiceItemSIT.
Only ONE request allowed per SIT service item.
*/
type RequestSITAddressUpdate struct {
	Context *middleware.Context
	Handler RequestSITAddressUpdateHandler
}

func (o *RequestSITAddressUpdate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRequestSITAddressUpdateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
