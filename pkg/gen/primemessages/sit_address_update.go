// Code generated by go-swagger; DO NOT EDIT.

package primemessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SitAddressUpdate sit address update
//
// swagger:model SitAddressUpdate
type SitAddressUpdate struct {

	// contractor remarks
	// Example: Customer reached out to me this week \u0026 let me know they want to move closer to family.
	ContractorRemarks string `json:"contractorRemarks,omitempty"`

	// distance
	// Example: 25
	// Read Only: true
	// Maximum: 50
	Distance int64 `json:"distance,omitempty"`

	// A hash unique to this shipment that should be used as the "If-Match" header for any updates.
	// Read Only: true
	ETag string `json:"eTag,omitempty"`

	// id
	// Example: ddd7bb48-4730-47c4-9781-6500384f4941
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// mto service item Id
	// Example: 12d9e103-5a56-4636-906d-6e993b97ef51
	// Read Only: true
	// Format: uuid
	MtoServiceItemID strfmt.UUID `json:"mtoServiceItemId,omitempty"`

	// new address Id
	// Example: 31a2ad3c-1682-4d5b-8423-ff40053a056b
	// Read Only: true
	// Format: uuid
	NewAddressID strfmt.UUID `json:"newAddressId,omitempty"`

	// status
	Status SitAddressUpdateStatus `json:"status,omitempty"`
}

// Validate validates this sit address update
func (m *SitAddressUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDistance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtoServiceItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewAddressID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SitAddressUpdate) validateDistance(formats strfmt.Registry) error {
	if swag.IsZero(m.Distance) { // not required
		return nil
	}

	if err := validate.MaximumInt("distance", "body", m.Distance, 50, false); err != nil {
		return err
	}

	return nil
}

func (m *SitAddressUpdate) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SitAddressUpdate) validateMtoServiceItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.MtoServiceItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("mtoServiceItemId", "body", "uuid", m.MtoServiceItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SitAddressUpdate) validateNewAddressID(formats strfmt.Registry) error {
	if swag.IsZero(m.NewAddressID) { // not required
		return nil
	}

	if err := validate.FormatOf("newAddressId", "body", "uuid", m.NewAddressID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SitAddressUpdate) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// ContextValidate validate this sit address update based on the context it is used
func (m *SitAddressUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDistance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateETag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMtoServiceItemID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNewAddressID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SitAddressUpdate) contextValidateDistance(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "distance", "body", int64(m.Distance)); err != nil {
		return err
	}

	return nil
}

func (m *SitAddressUpdate) contextValidateETag(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "eTag", "body", string(m.ETag)); err != nil {
		return err
	}

	return nil
}

func (m *SitAddressUpdate) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *SitAddressUpdate) contextValidateMtoServiceItemID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "mtoServiceItemId", "body", strfmt.UUID(m.MtoServiceItemID)); err != nil {
		return err
	}

	return nil
}

func (m *SitAddressUpdate) contextValidateNewAddressID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "newAddressId", "body", strfmt.UUID(m.NewAddressID)); err != nil {
		return err
	}

	return nil
}

func (m *SitAddressUpdate) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SitAddressUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SitAddressUpdate) UnmarshalBinary(b []byte) error {
	var res SitAddressUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
