// Code generated by go-swagger; DO NOT EDIT.

package primemessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SitAddressUpdateStatus The status of a SIT address update, indicating where it is in the TOO's approval process.
//
// swagger:model SitAddressUpdateStatus
type SitAddressUpdateStatus string

func NewSitAddressUpdateStatus(value SitAddressUpdateStatus) *SitAddressUpdateStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SitAddressUpdateStatus.
func (m SitAddressUpdateStatus) Pointer() *SitAddressUpdateStatus {
	return &m
}

const (

	// SitAddressUpdateStatusREQUESTED captures enum value "REQUESTED"
	SitAddressUpdateStatusREQUESTED SitAddressUpdateStatus = "REQUESTED"

	// SitAddressUpdateStatusAPPROVED captures enum value "APPROVED"
	SitAddressUpdateStatusAPPROVED SitAddressUpdateStatus = "APPROVED"

	// SitAddressUpdateStatusREJECTED captures enum value "REJECTED"
	SitAddressUpdateStatusREJECTED SitAddressUpdateStatus = "REJECTED"
)

// for schema
var sitAddressUpdateStatusEnum []interface{}

func init() {
	var res []SitAddressUpdateStatus
	if err := json.Unmarshal([]byte(`["REQUESTED","APPROVED","REJECTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sitAddressUpdateStatusEnum = append(sitAddressUpdateStatusEnum, v)
	}
}

func (m SitAddressUpdateStatus) validateSitAddressUpdateStatusEnum(path, location string, value SitAddressUpdateStatus) error {
	if err := validate.EnumCase(path, location, value, sitAddressUpdateStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this sit address update status
func (m SitAddressUpdateStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSitAddressUpdateStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this sit address update status based on the context it is used
func (m SitAddressUpdateStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := validate.ReadOnly(ctx, "", "body", SitAddressUpdateStatus(m)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
