// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ShowAmendedOrdersHandlerFunc turns a function with the right signature into a show amended orders handler
type ShowAmendedOrdersHandlerFunc func(ShowAmendedOrdersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ShowAmendedOrdersHandlerFunc) Handle(params ShowAmendedOrdersParams) middleware.Responder {
	return fn(params)
}

// ShowAmendedOrdersHandler interface for that can handle valid show amended orders params
type ShowAmendedOrdersHandler interface {
	Handle(ShowAmendedOrdersParams) middleware.Responder
}

// NewShowAmendedOrders creates a new http.Handler for the show amended orders operation
func NewShowAmendedOrders(ctx *middleware.Context, handler ShowAmendedOrdersHandler) *ShowAmendedOrders {
	return &ShowAmendedOrders{Context: ctx, Handler: handler}
}

/*ShowAmendedOrders swagger:route GET /orders/{ordersId}/amended_orders orders showAmendedOrders

Returns the amended orders for a given order

Returns the amended orders for a given order

*/
type ShowAmendedOrders struct {
	Context *middleware.Context
	Handler ShowAmendedOrdersHandler
}

func (o *ShowAmendedOrders) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewShowAmendedOrdersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
