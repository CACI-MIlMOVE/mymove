// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AddAmendedOrdersHandlerFunc turns a function with the right signature into a add amended orders handler
type AddAmendedOrdersHandlerFunc func(AddAmendedOrdersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddAmendedOrdersHandlerFunc) Handle(params AddAmendedOrdersParams) middleware.Responder {
	return fn(params)
}

// AddAmendedOrdersHandler interface for that can handle valid add amended orders params
type AddAmendedOrdersHandler interface {
	Handle(AddAmendedOrdersParams) middleware.Responder
}

// NewAddAmendedOrders creates a new http.Handler for the add amended orders operation
func NewAddAmendedOrders(ctx *middleware.Context, handler AddAmendedOrdersHandler) *AddAmendedOrders {
	return &AddAmendedOrders{Context: ctx, Handler: handler}
}

/*AddAmendedOrders swagger:route PATCH /orders/{ordersId}/add_amended_orders orders addAmendedOrders

Patch the amended orders for a given order

Patch the amended orders for a given order

*/
type AddAmendedOrders struct {
	Context *middleware.Context
	Handler AddAmendedOrdersHandler
}

func (o *AddAmendedOrders) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddAmendedOrdersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
