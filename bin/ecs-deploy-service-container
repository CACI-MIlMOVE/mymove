#!/bin/bash
#
#   Updates the named service with the given container definition template,
#   image, and environment.
#
set -eo pipefail
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
readonly DIR

usage() {
    echo "$0 <name> <template> <image> <environment> [launch_type]"
    exit 1
}
[[ -z $1 || -z $2 || -z $3 || -z $4 ]] && usage

set -u

readonly name=$1
readonly template=$2
readonly image=$3
readonly environment=$4
readonly launch_type="${5:-EC2}"

if [[ $launch_type != EC2 && $launch_type != FARGATE ]]; then
    echo "Error: launch_type must be EC2 or FARGATE"
    usage
fi

readonly cluster=app-${environment}
readonly rds=app-${environment}

readonly task_family=${name}-${environment}
readonly container_name=${name}-${environment}

# TODO: Change to move.mil when it's transferred to our infrastructure.
readonly zone_name="dp3.us"


check_arn() {
    local arn=$1
    [[ $arn = arn:* ]] || { echo "Error: Bad ARN: $arn"; exit 1; }
}

update_service() {
    local arn="$1"

    local network_config
    network_config=$(aws ecs describe-services --services "$name" --cluster "$cluster" --query 'services[0].networkConfiguration')

    echo "* Updating $name service to use $arn"
    aws ecs update-service --cluster "$cluster" --service "$name" --task-definition "$arn" --query 'service.deployments' --network-configuration "$network_config" || return 1
    echo "* Waiting for service to stabilize (this takes a while)"
    time aws ecs wait services-stable --services "$name" --cluster "$cluster"
    local exit_code=$?

    # show event log
    echo
    echo "Last 5 service events:"
    aws ecs describe-services --service "$name" --cluster "$cluster" --query 'services[].events[:5]'
    echo

    return $exit_code
}

# use environment subdomain unless we're deploying prod
domain=${environment}.${zone_name}
[[ $environment = prod ]] && domain=$zone_name
readonly domain

# get current task definiton (for rollback)
blue_task_def_arn=$(aws ecs describe-services --services "$name" --cluster "$cluster" --query 'services[0].taskDefinition' | jq -r .)

# get the DB address
echo "* Looking up DB host"
db_host=$(aws rds describe-db-instances --db-instance-identifier "$rds" --query 'DBInstances[0].Endpoint.Address' | jq -r .)
readonly db_host

# create the container definition from the json template
container_definition_json=$(perl -pe "s|{{db_host}}|$db_host|g; s|{{domain}}|$domain|g; s|{{environment}}|$environment|g; s|{{image}}|$image|g;" "$template")
readonly container_definition_json

# create new task definition with the given image
echo "* Registering new task definition"

launch_type_opts=""
if [[ $launch_type = FARGATE ]]; then
    launch_type_opts=(--requires-compatibilities FARGATE --execution-role-arn "ecs-task-execution-role-$name-$environment" --cpu 256 --memory 512)
fi

green_task_def_arn=$(aws ecs register-task-definition --network-mode awsvpc --task-role-arn "ecs-task-role-$name-$environment" --family "$task_family" --container-definitions "$container_definition_json" ${launch_type_opts[*]} --query 'taskDefinition.taskDefinitionArn' --output text)
readonly green_task_def_arn
check_arn "$green_task_def_arn"

if update_service "$green_task_def_arn"; then
    echo "Success."
    exit 0
fi
echo "Service failed to stabilize!"

echo
echo "Showing logs from recently stopped tasks:"
"$DIR"/ecs-show-service-stopped-logs "$name" "$environment" || true
echo

echo "* Rolling back to $blue_task_def_arn"
if update_service "$blue_task_def_arn"; then
    echo "Rollback complete."
    exit 1
fi
echo "Rollback failed!"
exit 1
